[{
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: __coco_data_
			opt: false
			type: TAnonymous([{
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TFunction([TPath({
						name: Event
						pack: []
						params: []
						sub: null
					})], TPath({
						name: Void
						pack: []
						params: []
						sub: null
					})))]
					sub: null
				}), null)
				meta: []
				name: act
				pos: #pos
			}, {
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TPath({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Listed
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}))]
					sub: null
				}), null)
				meta: [{
					name: :optional
					params: []
					pos: #pos
				}]
				name: contents
				pos: #pos
			}])
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBlock([])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __initAttributes)
					pos: #pos
				}, [{
					expr: EConst(CIdent(__coco_data_))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					isFinal: false
					name: snapshot
					type: null
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(super))
					pos: #pos
				}, [{
					expr: EConst(CIdent(render))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ESwitch({
					expr: EParenthesis({
						expr: EConst(CIdent(null))
						pos: #pos
					})
					pos: #pos
				}, [{
					expr: null
					guard: null
					values: [{
						expr: EConst(CIdent(null))
						pos: #pos
					}]
				}, {
					expr: {
						expr: EBlock([{
							expr: ECall({
								expr: EConst(CIdent(beforeUnmounting))
								pos: #pos
							}, [{
								expr: EConst(CIdent(v))
								pos: #pos
							}])
							pos: #pos
						}])
						pos: #pos
					}
					guard: null
					values: [{
						expr: EConst(CIdent(v))
						pos: #pos
					}]
				}], null)
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Void
			pack: []
			params: []
			sub: null
		})
	})
	meta: null
	name: new
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: a0
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ESwitch({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, __slots)
							pos: #pos
						}, act)
						pos: #pos
					}, value)
					pos: #pos
				}, [{
					expr: {
						expr: EBlock([{
							expr: EThrow({
								expr: EBinop(OpAdd, {
									expr: EBinop(OpAdd, {
										expr: EBinop(OpAdd, {
											expr: EBinop(OpAdd, {
												expr: EConst(CString(mandatory attribute ))
												pos: #pos
											}, {
												expr: EConst(CString(act))
												pos: #pos
											})
											pos: #pos
										}, {
											expr: EConst(CString( of <))
											pos: #pos
										})
										pos: #pos
									}, {
										expr: EConst(CString(View0))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EConst(CString(/> was set to null))
									pos: #pos
								})
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					guard: null
					values: [{
						expr: EConst(CIdent(null))
						pos: #pos
					}]
				}, {
					expr: {
						expr: EBlock([{
							expr: ECall({
								expr: EConst(CIdent(__fn))
								pos: #pos
							}, [{
								expr: EConst(CIdent(a0))
								pos: #pos
							}])
							pos: #pos
						}])
						pos: #pos
					}
					guard: null
					values: [{
						expr: EConst(CIdent(__fn))
						pos: #pos
					}]
				}], null)
				pos: #pos
			})
			pos: #pos
		}
		params: null
		ret: TPath({
			name: StdTypes
			pack: []
			params: []
			sub: Void
		})
	})
	meta: [{
		name: :attr
		params: []
		pos: #pos
	}]
	name: act
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FProp(get, never, TPath({
		name: List
		pack: []
		params: [TPType(TPath({
			name: Listed
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), null)
	meta: [{
		name: :attr
		params: []
		pos: #pos
	}]
	name: contents
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FProp(get, set, TPath({
		name: Bool
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: :state
		params: []
		pos: #pos
	}]
	name: hid
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FProp(get, set, TPath({
		name: Route
		pack: []
		params: []
		sub: null
	}), null)
	meta: [{
		name: :state
		params: []
		pos: #pos
	}]
	name: was
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TPath({
		name: Map
		pack: []
		params: [TPType(TPath({
			name: Route
			pack: []
			params: []
			sub: null
		})), TPType(TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), {
		expr: EArrayDecl([{
			expr: EBinop(OpArrow, {
				expr: EConst(CIdent(HomePage))
				pos: #pos
			}, {
				expr: EConst(CIdent(true))
				pos: #pos
			})
			pos: #pos
		}, {
			expr: EBinop(OpArrow, {
				expr: EConst(CIdent(OtherPage))
				pos: #pos
			}, {
				expr: EConst(CIdent(true))
				pos: #pos
			})
			pos: #pos
		}, {
			expr: EBinop(OpArrow, {
				expr: EConst(CIdent(TwoPage))
				pos: #pos
			}, {
				expr: EConst(CIdent(true))
				pos: #pos
			})
			pos: #pos
		}])
		pos: #pos
	})
	meta: []
	name: map
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: where
			opt: false
			type: TPath({
				name: Route
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EConst(CIdent(trace))
					pos: #pos
				}, [{
					expr: EBinop(OpAdd, {
						expr: EConst(CString(gogto))
						pos: #pos
					}, {
						expr: EConst(CIdent(where))
						pos: #pos
					})
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EFor({
					expr: EBinop(OpArrow, {
						expr: EConst(CIdent(key))
						pos: #pos
					}, {
						expr: EBinop(OpIn, {
							expr: EConst(CIdent(value))
							pos: #pos
						}, {
							expr: EConst(CIdent(map))
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EIf({
							expr: EBinop(OpEq, {
								expr: EConst(CIdent(value))
								pos: #pos
							}, {
								expr: EConst(CIdent(true))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EBinop(OpAssign, {
								expr: EConst(CIdent(value))
								pos: #pos
							}, {
								expr: EConst(CIdent(false))
								pos: #pos
							})
							pos: #pos
						}, null)
						pos: #pos
					}, {
						expr: EIf({
							expr: EBinop(OpEq, {
								expr: EConst(CIdent(key))
								pos: #pos
							}, {
								expr: EConst(CIdent(where))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: EBinop(OpAssign, {
								expr: EConst(CIdent(value))
								pos: #pos
							}, {
								expr: EConst(CIdent(true))
								pos: #pos
							})
							pos: #pos
						}, null)
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(trace))
					pos: #pos
				}, [{
					expr: EBinop(OpAdd, {
						expr: EConst(CString(getstatus))
						pos: #pos
					}, {
						expr: ECall({
							expr: EConst(CIdent(getstatus))
							pos: #pos
						}, [{
							expr: EConst(CIdent(where))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: goto
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FProp(get, set, null, null)
	meta: [{
		name: :state
		params: []
		pos: #pos
	}]
	name: getstatus
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :markup
					params: []
					pos: #pos
				}, {
					expr: EConst(CString(<div>
		<Input value="bim" placeholder="me"/>
		<Icon img={IconName.lock} />
		<Search content={contents}/>
		<Button text="pop" onClick={e->hid=!hid.Log()} />
		<Button text="pop" img={IconName.check} onClick={e->e.Log()} />
		<IconicInput img={IconName.circle} direction={left} act={e->e.Log()} />
		
		<Login act={e->{e.preventDefault();}}/>
		<Button onClick={e->goto(TwoPage)} text="goto"/>
		<View1 hidden={getstatus(HomePage)} act={e->goto(OtherPage)}/>
		<View2 hidden={getstatus(HomePage)} act={e->goto(HomePage)}/>
		
	</div>))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: RenderResult
			pack: [coconut, ui]
			params: []
			sub: null
		})
	})
	meta: []
	name: render
	pos: #pos
}, {
	access: null
	doc: null
	kind: FProp(default, never, TAnonymous([{
		access: null
		doc: null
		kind: FProp(default, never, TPath({
			name: Value
			pack: [coconut, data]
			params: [TPType(TPath({
				name: List
				pack: []
				params: [TPType(TPath({
					name: Listed
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			}))]
			sub: null
		}), null)
		meta: null
		name: contents
		pos: #pos
	}]), {
		expr: EBlock([{
			expr: EParenthesis({
				expr: ECheckType({
					expr: EObjectDecl([{
						expr: {
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(List))
									pos: #pos
								}, fromArray)
								pos: #pos
							}, [{
								expr: EArrayDecl([{
									expr: EObjectDecl([{
										expr: {
											expr: EConst(CString(one))
											pos: #pos
										}
										field: title
										quotes: Unquoted
									}])
									pos: #pos
								}, {
									expr: EObjectDecl([{
										expr: {
											expr: EConst(CString(two))
											pos: #pos
										}
										field: title
										quotes: Unquoted
									}])
									pos: #pos
								}, {
									expr: EObjectDecl([{
										expr: {
											expr: EConst(CString(three))
											pos: #pos
										}
										field: title
										quotes: Unquoted
									}])
									pos: #pos
								}])
								pos: #pos
							}])
							pos: #pos
						}
						field: contents
						quotes: null
					}])
					pos: #pos
				}, TAnonymous([{
					access: null
					doc: null
					kind: FProp(default, never, TPath({
						name: Value
						pack: [coconut, data]
						params: [TPType(TPath({
							name: List
							pack: []
							params: [TPType(TPath({
								name: Listed
								pack: []
								params: []
								sub: null
							}))]
							sub: null
						}))]
						sub: null
					}), null)
					meta: null
					name: contents
					pos: #pos
				}]))
				pos: #pos
			})
			pos: #pos
		}])
		pos: #pos
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __tink_defaults4
	pos: #pos
}, {
	access: []
	doc: null
	kind: FProp(default, never, TAnonymous([{
		access: null
		doc: null
		kind: FVar(TPath({
			name: Slot
			pack: [coconut, ui, tools]
			params: [TPType(TFunction([TPath({
				name: Event
				pack: []
				params: []
				sub: null
			})], TPath({
				name: Void
				pack: []
				params: []
				sub: null
			})))]
			sub: null
		}), null)
		meta: null
		name: act
		pos: #pos
	}, {
		access: null
		doc: null
		kind: FVar(TPath({
			name: Slot
			pack: [coconut, ui, tools]
			params: [TPType(TPath({
				name: List
				pack: []
				params: [TPType(TPath({
					name: Listed
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			}))]
			sub: null
		}), null)
		meta: null
		name: contents
		pos: #pos
	}]), {
		expr: EObjectDecl([{
			expr: {
				expr: ENew({
					name: Slot
					pack: [coconut, ui, tools]
					params: [TPType(TFunction([TPath({
						name: Event
						pack: []
						params: []
						sub: null
					})], TPath({
						name: Void
						pack: []
						params: []
						sub: null
					})))]
					sub: null
				}, [{
					expr: EConst(CIdent(this))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}])
				pos: #pos
			}
			field: act
			quotes: null
		}, {
			expr: {
				expr: ENew({
					name: Slot
					pack: [coconut, ui, tools]
					params: [TPType(TPath({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Listed
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}))]
					sub: null
				}, [{
					expr: EConst(CIdent(this))
					pos: #pos
				}, {
					expr: EConst(CIdent(null))
					pos: #pos
				}])
				pos: #pos
			}
			field: contents
			quotes: null
		}])
		pos: #pos
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __slots
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EReturn({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, __slots)
							pos: #pos
						}, contents)
						pos: #pos
					}, value)
					pos: #pos
				})
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: TPath({
			name: List
			pack: []
			params: [TPType(TPath({
				name: Listed
				pack: []
				params: []
				sub: null
			}))]
			sub: null
		})
	})
	meta: []
	name: get_contents
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: State
		pack: [tink, state]
		params: [TPType(TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), {
		expr: ENew({
			name: State
			pack: [tink, state]
			params: [TPType(TPath({
				name: Bool
				pack: []
				params: []
				sub: null
			}))]
			sub: null
		}, [{
			expr: EConst(CIdent(true))
			pos: #pos
		}, {
			expr: EConst(CIdent(null))
			pos: #pos
		}])
		pos: #pos
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __coco_hid
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EField({
					expr: EConst(CIdent(__coco_hid))
					pos: #pos
				}, value)
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Bool
			pack: []
			params: []
			sub: null
		})
	})
	meta: null
	name: get_hid
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: param
			opt: false
			type: TPath({
				name: Bool
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(__coco_hid))
						pos: #pos
					}, set)
					pos: #pos
				}, [{
					expr: EConst(CIdent(param))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(param))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: set_hid
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: State
		pack: [tink, state]
		params: [TPType(TPath({
			name: Route
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	}), {
		expr: ENew({
			name: State
			pack: [tink, state]
			params: [TPType(TPath({
				name: Route
				pack: []
				params: []
				sub: null
			}))]
			sub: null
		}, [{
			expr: EConst(CIdent(HomePage))
			pos: #pos
		}, {
			expr: EConst(CIdent(null))
			pos: #pos
		}])
		pos: #pos
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __coco_was
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EField({
					expr: EConst(CIdent(__coco_was))
					pos: #pos
				}, value)
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: TPath({
			name: Route
			pack: []
			params: []
			sub: null
		})
	})
	meta: null
	name: get_was
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: param
			opt: false
			type: TPath({
				name: Route
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(__coco_was))
						pos: #pos
					}, set)
					pos: #pos
				}, [{
					expr: EConst(CIdent(param))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(param))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: set_was
	pos: #pos
}, {
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: State
		pack: [tink, state]
		params: [TPType(null <- expected enum value)]
		sub: null
	}), {
		expr: ENew({
			name: State
			pack: [tink, state]
			params: [TPType(null <- expected enum value)]
			sub: null
		}, [{
			expr: EFunction(null, {
				args: [{
					meta: []
					name: me
					opt: false
					type: TPath({
						name: Route
						pack: []
						params: []
						sub: null
					})
					value: null
				}]
				expr: {
					expr: EBlock([{
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(map))
									pos: #pos
								}, get)
								pos: #pos
							}, [{
								expr: EConst(CIdent(me))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}
				params: []
				ret: TPath({
					name: Bool
					pack: []
					params: []
					sub: null
				})
			})
			pos: #pos
		}, {
			expr: EConst(CIdent(null))
			pos: #pos
		}])
		pos: #pos
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __coco_getstatus
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EField({
					expr: EConst(CIdent(__coco_getstatus))
					pos: #pos
				}, value)
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: get_getstatus
	pos: #pos
}, {
	access: [AInline]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: param
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(__coco_getstatus))
						pos: #pos
					}, set)
					pos: #pos
				}, [{
					expr: EConst(CIdent(param))
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(param))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: set_getstatus
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: attributes
			opt: false
			type: TAnonymous([{
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TFunction([TPath({
						name: Event
						pack: []
						params: []
						sub: null
					})], TPath({
						name: Void
						pack: []
						params: []
						sub: null
					})))]
					sub: null
				}), null)
				meta: []
				name: act
				pos: #pos
			}, {
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TPath({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Listed
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}))]
					sub: null
				}), null)
				meta: [{
					name: :optional
					params: []
					pos: #pos
				}]
				name: contents
				pos: #pos
			}])
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: ECall({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, __slots)
							pos: #pos
						}, act)
						pos: #pos
					}, setData)
					pos: #pos
				}, [{
					expr: EField({
						expr: EConst(CIdent(attributes))
						pos: #pos
					}, act)
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(this))
								pos: #pos
							}, __slots)
							pos: #pos
						}, contents)
						pos: #pos
					}, setData)
					pos: #pos
				}, [{
					expr: ECall({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(attributes))
								pos: #pos
							}, contents)
							pos: #pos
						}, or)
						pos: #pos
					}, [{
						expr: EField({
							expr: EConst(CIdent(__tink_defaults4))
							pos: #pos
						}, contents)
						pos: #pos
					}])
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __initAttributes
	pos: #pos
}, {
	access: [AStatic]
	doc: null
	kind: FVar(null, {
		expr: EObjectDecl([{
			expr: {
				expr: EField({
					expr: EConst(CIdent(View0))
					pos: #pos
				}, new)
				pos: #pos
			}
			field: create
			quotes: Unquoted
		}, {
			expr: {
				expr: EFunction(null, {
					args: [{
						meta: null
						name: attr
						opt: false
						type: null
						value: null
					}, {
						meta: null
						name: v
						opt: false
						type: null
						value: null
					}]
					expr: {
						expr: ECall({
							expr: EField({
								expr: EParenthesis({
									expr: ECheckType({
										expr: ECast({
											expr: EConst(CIdent(v))
											pos: #pos
										}, null)
										pos: #pos
									}, TPath({
										name: View0
										pack: []
										params: []
										sub: null
									}))
									pos: #pos
								})
								pos: #pos
							}, __initAttributes)
							pos: #pos
						}, [{
							expr: EConst(CIdent(attr))
							pos: #pos
						}])
						pos: #pos
					}
					params: []
					ret: null
				})
				pos: #pos
			}
			field: update
			quotes: Unquoted
		}])
		pos: #pos
	})
	meta: null
	name: __type
	pos: #pos
}, {
	access: [AStatic, APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: hxxMeta
			opt: false
			type: TAnonymous([{
				access: null
				doc: null
				kind: FProp(default, never, TPath({
					name: Key
					pack: [coconut, diffing]
					params: []
					sub: null
				}), null)
				meta: [{
					name: :optional
					params: []
					pos: #pos
				}]
				name: key
				pos: #pos
			}, {
				access: null
				doc: null
				kind: FProp(default, never, TPath({
					name: Ref
					pack: [coconut, ui]
					params: [TPType(TPath({
						name: View0
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}), null)
				meta: [{
					name: :optional
					params: []
					pos: #pos
				}]
				name: ref
				pos: #pos
			}])
			value: null
		}, {
			meta: null
			name: attributes
			opt: false
			type: TAnonymous([{
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TFunction([TPath({
						name: Event
						pack: []
						params: []
						sub: null
					})], TPath({
						name: Void
						pack: []
						params: []
						sub: null
					})))]
					sub: null
				}), null)
				meta: []
				name: act
				pos: #pos
			}, {
				access: null
				doc: null
				kind: FVar(TPath({
					name: Value
					pack: [coconut, data]
					params: [TPType(TPath({
						name: List
						pack: []
						params: [TPType(TPath({
							name: Listed
							pack: []
							params: []
							sub: null
						}))]
						sub: null
					}))]
					sub: null
				}), null)
				meta: [{
					name: :optional
					params: []
					pos: #pos
				}]
				name: contents
				pos: #pos
			}])
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EField({
									expr: EConst(CIdent(coconut))
									pos: #pos
								}, diffing)
								pos: #pos
							}, VNode)
							pos: #pos
						}, VNodeData)
						pos: #pos
					}, VWidget)
					pos: #pos
				}, [{
					expr: ECast({
						expr: EConst(CIdent(__type))
						pos: #pos
					}, null)
					pos: #pos
				}, {
					expr: EField({
						expr: EConst(CIdent(hxxMeta))
						pos: #pos
					}, ref)
					pos: #pos
				}, {
					expr: EField({
						expr: EConst(CIdent(hxxMeta))
						pos: #pos
					}, key)
					pos: #pos
				}, {
					expr: EConst(CIdent(attributes))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: TPath({
			name: RenderResult
			pack: [coconut, ui]
			params: []
			sub: null
		})
	})
	meta: null
	name: fromHxx
	pos: #pos
}]
line 1028: expected enum value
line 1034: expected enum value