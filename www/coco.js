// Generated by Haxe 4.1.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw haxe_Exception.thrown("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var Debug = function() { };
Debug.__name__ = true;
Debug.Log = function(val,msg,pos) {
	if(msg == null) {
		msg = "";
	}
	haxe_Log.trace("" + pos.className + " " + pos.lineNumber + " " + msg,{ fileName : "Debug.hx", lineNumber : 3, className : "Debug", methodName : "Log", customParams : [val]});
	return val;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Route = $hxEnums["Route"] = { __ename__ : true, __constructs__ : ["HomePage","OnePage","TwoPage","UnknownPage"]
	,HomePage: {_hx_index:0,__enum__:"Route",toString:$estr}
	,OnePage: {_hx_index:1,__enum__:"Route",toString:$estr}
	,TwoPage: {_hx_index:2,__enum__:"Route",toString:$estr}
	,UnknownPage: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"Route",toString:$estr}; },$_.__params__ = ["path"],$_)
};
var tink_Url = {};
tink_Url.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query);
	}
};
tink_Url._new = function(parts) {
	return parts;
};
tink_Url.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.host != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url_Path.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
		tink_Url.makePayload(parts);
		return parts;
	}
};
tink_Url.makePayload = function(parts) {
	var payload = "";
	var _g = parts.host;
	var _g1 = parts.auth;
	if(_g1 == null) {
		if(_g != null) {
			payload = "" + ("//" + (_g == null ? "null" : _g));
		}
	} else if(_g == null) {
		payload = "" + ("//" + (_g1 == null ? "null" : _g1 == null ? "" : "" + _g1 + "@"));
	} else {
		payload = "" + ("//" + (_g1 == null ? "null" : _g1 == null ? "" : "" + _g1 + "@") + (_g == null ? "null" : _g));
	}
	payload += parts.path == null ? "null" : parts.path;
	var _g = parts.query;
	if(_g != null) {
		payload += "?" + (_g == null ? "null" : _g);
	}
	var _g = parts.hash;
	if(_g != null) {
		payload += "#" + _g;
	}
	parts.payload = payload.toString();
};
tink_Url.toString = function(this1) {
	if(this1.scheme == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink_Url.fromString = function(s) {
	return tink_Url.parse(s);
};
tink_Url.noop = function(_) {
};
tink_Url.parse = function(s,onError) {
	while(true) {
		if(s == null) {
			s = "";
			onError = null;
			continue;
		}
		if(onError == null) {
			onError = tink_Url.noop;
		}
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"data:")) {
			return { scheme : "data", payload : HxOverrides.substr(s,5,null)};
		}
		var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
		var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
		FORMAT.match(s);
		var hosts;
		var _g = FORMAT.matched(7);
		if(_g == null) {
			hosts = [];
		} else {
			var _g1 = [];
			var _g2 = 0;
			var _g3 = _g.split(",");
			while(_g2 < _g3.length) {
				var host = _g3[_g2];
				++_g2;
				HOST.match(host);
				var host1;
				var _g4 = HOST.matched(2);
				var _g5 = HOST.matched(3);
				if(_g4 == null) {
					host1 = _g5;
				} else if(_g5 == null) {
					host1 = "[" + _g4 + "]";
				} else {
					onError("invalid host " + host);
					host1 = null;
				}
				var port;
				var _g6 = HOST.matched(5);
				if(_g6 == null) {
					port = null;
				} else {
					var _g7 = Std.parseInt(_g6);
					if(_g7 == null) {
						onError("invalid port " + _g6);
						port = null;
					} else {
						port = _g7;
					}
				}
				_g1.push(tink_url_Host._new(host1,port));
			}
			hosts = _g1;
		}
		var path = FORMAT.matched(8);
		if(hosts.length > 0 && path.charAt(0) != "/") {
			path = "/" + path;
		}
		return { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url_Path.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	}
};
tink_Url.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, host : parts.host, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink_Url.makePayload(parts1);
	return parts1;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b = "" + (s == null ? "null" : "" + s);
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var tink_url_Host = {};
tink_url_Host._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw haxe_Exception.thrown("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url_Host.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			return _g[0].split(":")[0];
		case 2:
			return _g[0] + "]";
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var _g1 = _g[0].split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				return Std.parseInt(_g1);
			}
			break;
		case 2:
			var _g1 = _g[1].split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				return Std.parseInt(_g1);
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.toString = function(this1) {
	return this1;
};
var tink_url_Path = {};
tink_url_Path.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			_g.push(p);
		}
	}
	return _g;
};
tink_url_Path.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url_Path.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url_Path._new = function(s) {
	return s;
};
tink_url_Path.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url_Path.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			return tink_url_Path.ofString(HxOverrides.substr(this1,0,_g + 1) + (that == null ? "null" : that));
		}
	}
};
tink_url_Path.ofString = function(s) {
	return tink_url_Path.normalize(s);
};
tink_url_Path.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			parts.push(_g2);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g = 0;
		var _g1 = up;
		while(_g < _g1) {
			++_g;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url_Path.toString = function(this1) {
	return this1;
};
var tink_url_PortionArray = {};
tink_url_PortionArray.toStringArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url_Portion.toString(p));
	}
	return _g;
};
var tink_url_Portion = {};
tink_url_Portion.get_raw = function(this1) {
	return this1;
};
tink_url_Portion._new = function(v) {
	return v;
};
tink_url_Portion.stringly = function(this1) {
	return tink_url_Portion.toString(this1);
};
tink_url_Portion.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return decodeURIComponent(this1.split("+").join(" "));
	}
};
tink_url_Portion.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var coconut_data_Model = function() { };
coconut_data_Model.__name__ = true;
var coconut_router_BrowserRouter = function(__coco_init) {
	var _gthis = this;
	this._updatePerformed = tink_core_Signal.trigger();
	this.locationToRoute = $bind(__coco_init,__coco_init.locationToRoute);
	this.routeToLocation = $bind(__coco_init,__coco_init.routeToLocation);
	var this1 = { f : function() {
		return _gthis.locationToRoute(tink_Url.fromString(tink_state_Observable.get_value(spectatory_Location.href)));
	}};
	this.__coco_route = tink_state_Observable.auto(this1);
	var _g = $bind(__coco_init,__coco_init.isExternalLink);
	this.isExternalLink = _g == null ? function(href) {
		return href.indexOf("//") >= 0;
	} : _g;
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core_Signal.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { locationToRoute : tink_state_Observable.const(this.locationToRoute), routeToLocation : tink_state_Observable.const(this.routeToLocation), route : this.__coco_route, isExternalLink : tink_state_Observable.const(this.isExternalLink), isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
		return count > 0;
	}))};
};
coconut_router_BrowserRouter.__name__ = true;
coconut_router_BrowserRouter.__interfaces__ = [coconut_data_Model];
coconut_router_BrowserRouter.prototype = {
	back: function() {
		window.history.back();
	}
	,push: function(route) {
		var url = tink_Url.toString(this.routeToLocation(route));
		window.history.pushState(null,null,url);
	}
	,replace: function(route) {
		var url = tink_Url.toString(this.routeToLocation(route));
		window.history.replaceState(null,null,url);
	}
	,intercept: function(element) {
		if(element != null) {
			element.addEventListener("click",$bind(this,this.listener));
		}
	}
	,pushUrl: function(url) {
		window.history.pushState(null,null,url);
	}
	,listener: function(event) {
		var _g = event.target.closest("a");
		if(_g != null) {
			var _g1 = _g.getAttribute("href");
			if(_g1 != null) {
				if(!this.isExternalLink(_g1)) {
					event.preventDefault();
					this.pushUrl(_g1);
				}
			}
		}
	}
	,get_locationToRoute: function() {
		return this.locationToRoute;
	}
	,get_routeToLocation: function() {
		return this.routeToLocation;
	}
	,get_route: function() {
		return tink_state_Observable.get_value(this.__coco_route);
	}
	,get_isExternalLink: function() {
		return this.isExternalLink;
	}
	,__cocoupdate: function(ret) {
		var _gthis = this;
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				_gthis.__coco_transitionCount.set(tink_state_State.get_value(_gthis.__coco_transitionCount) - 1);
			}
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				tink_Anon.getExistentFields(_g);
				_gthis._updatePerformed.handlers.invoke(_g);
				break;
			case 1:
				_gthis.errorTrigger.handlers.invoke(o.failure);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state_State.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,get_updatePerformed: function() {
		return this._updatePerformed;
	}
	,get_isInTransition: function() {
		return tink_state_State.get_value(this.__coco_transitionCount) > 0;
	}
	,__class__: coconut_router_BrowserRouter
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			tink_core_Callback.invoke(cb,f(result));
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				tink_core_Callback.invoke(cb,_g.v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var tink_state_Observable = {};
tink_state_Observable.get_value = function(this1) {
	return tink_state_Observable.measure(this1).a;
};
tink_state_Observable._new = function(get,changed) {
	var this1 = tink_state_Observable.create(function() {
		var this1 = new tink_core_MPair(get(),tink_core_Signal.nextTime(changed));
		var this2 = this1;
		return this2;
	});
	return this1;
};
tink_state_Observable.combine = function(this1,that,f) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state_Observable.measure(this1);
		var q = tink_state_Observable.measure(that);
		var this2 = new tink_core_MPair(f(p.a,q.a),tink_core_Future.first(p.b,q.b));
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.nextTime = function(this1,options,check) {
	return tink_state_Observable.getNext(this1,options,function(v) {
		if(check(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_state_Observable.getNext = function(this1,options,select) {
	var ret = new tink_core_FutureTrigger();
	var waiting = options != null && options.butNotNow;
	var link = tink_state_Observable.bind(this1,{ direct : options != null && options.hires},function(value) {
		var out = select(value);
		if(waiting) {
			waiting = out != haxe_ds_Option.None;
		} else {
			switch(out._hx_index) {
			case 0:
				ret.trigger(out.v);
				break;
			case 1:
				break;
			}
		}
	});
	var _e = link;
	var tmp = function() {
		if(_e != null) {
			_e.cancel();
		}
	};
	ret.handle(tink_core_Callback.fromNiladic(tmp));
	return ret;
};
tink_state_Observable.join = function(this1,that) {
	var lastA = null;
	return tink_state_Observable.combine(this1,that,function(a,b) {
		var ret = lastA == a ? b : a;
		lastA = a;
		return ret;
	});
};
tink_state_Observable.map = function(this1,f) {
	return tink_state_Observable.create(function() {
		var m = tink_state_Observable.measure(this1);
		var this2 = new tink_core_MPair(f(m.a),m.b);
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.combineAsync = function(this1,that,f) {
	return tink_state_Observable.mapAsync(tink_state_Observable.combine(this1,that,f),tink_state_Transform.plain(function(x) {
		return x;
	}));
};
tink_state_Observable.mapAsync = function(this1,f) {
	return tink_state_Observable.flatten(tink_state_Observable.map(tink_state_Observable.map(this1,f),tink_state_Transform.plain(tink_state_Observable.ofPromise)));
};
tink_state_Observable.measure = function(this1) {
	var before = tink_state_Observable.stack.first();
	tink_state_Observable.stack.push(this1);
	var p = this1.poll();
	if(js_Boot.getClass(before) == tink_state__$Observable_AutoObservable) {
		before.subscribe(this1,p);
	}
	tink_state_Observable.stack.pop();
	return p;
};
tink_state_Observable.switchSync = function(this1,cases,dfault) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state_Observable.measure(this1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			if(c.when(p.a)) {
				dfault = c.then;
				break;
			}
		}
		var p2 = tink_state_Observable.measure(dfault.get());
		var this2 = new tink_core_MPair(p2.a,tink_core_Future.first(p.b,p2.b));
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.bind = function(this1,options,cb) {
	var cb1;
	if(options == null) {
		cb1 = cb;
	} else {
		var _g = options.comparator;
		if(_g == null) {
			cb1 = cb;
		} else {
			var equal = _g;
			var isFirst = true;
			var last = null;
			cb1 = function(data) {
				if(isFirst) {
					isFirst = false;
					tink_core_Callback.invoke(cb,data);
				} else if(!equal(last,data)) {
					tink_core_Callback.invoke(cb,data);
				}
				last = data;
			};
		}
	}
	if(options == null) {
		var scheduled = false;
		var active = true;
		var updated = null;
		var link = null;
		var update = function() {
			if(active) {
				var _e = this1;
				var next = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				tink_core_Callback.invoke(cb1,next.a);
				scheduled = false;
				link = next.b.handle(updated);
			}
		};
		var doSchedule = function() {
			if(scheduled) {
				return;
			}
			scheduled = true;
			tink_state_Observable.schedule(update);
		};
		updated = tink_core_Callback.fromNiladic(doSchedule);
		doSchedule();
		var this2 = new tink_core_SimpleLink(function() {
			if(active) {
				active = false;
				if(link != null) {
					link.cancel();
				}
			}
		});
		return this2;
	} else {
		var _g = options.direct;
		if(_g == null) {
			var scheduled1 = false;
			var active1 = true;
			var updated1 = null;
			var link1 = null;
			var update1 = function() {
				if(active1) {
					var _e = this1;
					var next = tink_state_Observable.untracked(function() {
						return tink_state_Observable.measure(_e);
					});
					tink_core_Callback.invoke(cb1,next.a);
					scheduled1 = false;
					link1 = next.b.handle(updated1);
				}
			};
			var doSchedule = function() {
				if(scheduled1) {
					return;
				}
				scheduled1 = true;
				tink_state_Observable.schedule(update1);
			};
			updated1 = tink_core_Callback.fromNiladic(doSchedule);
			doSchedule();
			var this2 = new tink_core_SimpleLink(function() {
				if(active1) {
					active1 = false;
					if(link1 != null) {
						link1.cancel();
					}
				}
			});
			return this2;
		} else if(_g == false) {
			var scheduled2 = false;
			var active2 = true;
			var updated2 = null;
			var link2 = null;
			var update2 = function() {
				if(active2) {
					var _e = this1;
					var next = tink_state_Observable.untracked(function() {
						return tink_state_Observable.measure(_e);
					});
					tink_core_Callback.invoke(cb1,next.a);
					scheduled2 = false;
					link2 = next.b.handle(updated2);
				}
			};
			var doSchedule = function() {
				if(scheduled2) {
					return;
				}
				scheduled2 = true;
				tink_state_Observable.schedule(update2);
			};
			updated2 = tink_core_Callback.fromNiladic(doSchedule);
			doSchedule();
			var this2 = new tink_core_SimpleLink(function() {
				if(active2) {
					active2 = false;
					if(link2 != null) {
						link2.cancel();
					}
				}
			});
			return this2;
		} else {
			var link3 = null;
			var update3 = null;
			update3 = function(_) {
				var _e = this1;
				var next = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				tink_core_Callback.invoke(cb1,next.a);
				link3 = next.b.handle(update3);
			};
			update3(tink_core_Noise.Noise);
			var this2 = new tink_core_SimpleLink(function() {
				if(link3 != null) {
					link3.cancel();
				}
			});
			return this2;
		}
	}
};
tink_state_Observable.schedule = function(f) {
	var _g = tink_state_Observable.scheduled;
	if(_g == null) {
		f();
	} else {
		_g.push(f);
		tink_state_Observable.scheduleUpdate();
	}
};
tink_state_Observable.scheduleUpdate = function() {
	if(!tink_state_Observable.isScheduled) {
		tink_state_Observable.isScheduled = true;
		if(tink_state_Observable.hasRAF) {
			window.requestAnimationFrame(function(_) {
				tink_state_Observable.scheduledRun();
			});
		} else {
			tink_core_Callback.defer(tink_state_Observable.scheduledRun);
		}
	}
};
tink_state_Observable.scheduledRun = function() {
	tink_state_Observable.isScheduled = false;
	tink_state_Observable.updatePending();
};
tink_state_Observable.updatePending = function(maxSeconds) {
	if(maxSeconds == null) {
		maxSeconds = .01;
	}
	var end = HxOverrides.now() / 1000 + maxSeconds;
	while(true) {
		var old = tink_state_Observable.scheduled;
		tink_state_Observable.scheduled = [];
		var _g = 0;
		while(_g < old.length) {
			var o = old[_g];
			++_g;
			o();
		}
		if(!(tink_state_Observable.scheduled.length > 0 && HxOverrides.now() / 1000 < end)) {
			break;
		}
	}
	if(tink_state_Observable.scheduled.length > 0) {
		tink_state_Observable.scheduleUpdate();
		return true;
	} else {
		return false;
	}
};
tink_state_Observable.updateAll = function() {
	tink_state_Observable.updatePending(Infinity);
};
tink_state_Observable.lift = function(o) {
	return o;
};
tink_state_Observable.deliver = function(o,initial) {
	return tink_state_Observable.map(o,tink_state_Transform.plain(function(p) {
		if(p._hx_index == 1) {
			initial = p.result;
			return initial;
		} else {
			return initial;
		}
	}));
};
tink_state_Observable.flatten = function(o) {
	return tink_state_Observable.create(function() {
		var m = tink_state_Observable.measure(o);
		var m2 = tink_state_Observable.measure(m.a);
		var this1 = new tink_core_MPair(m2.a,tink_core_Future.or(m.b,m2.b));
		var this2 = this1;
		return this2;
	});
};
tink_state_Observable.ofPromise = function(p) {
	if(p == null) {
		throw haxe_Exception.thrown("Expected Promise but got null");
	}
	var value = tink_state_Promised.Loading;
	var _e = p;
	var _g = function(f) {
		var ret = _e.map(f);
		return ret.gather();
	};
	var f = function(_) {
		return tink_core_Noise.Noise;
	};
	var becameInvalid = new tink_core__$Lazy_LazyFunc(function() {
		return _g(f);
	});
	return tink_state_Observable.create(function() {
		if(p != null) {
			p.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					value = tink_state_Promised.Done(o.data);
					break;
				case 1:
					value = tink_state_Promised.Failed(o.failure);
					break;
				}
				becameInvalid = new tink_core__$Lazy_LazyConst(tink_state_ConstObservable.NEVER);
			});
		}
		var becameInvalid1 = becameInvalid.get();
		var this1 = new tink_core_MPair(value,becameInvalid1);
		var this2 = this1;
		return this2;
	});
};
tink_state_Observable.create = function(f,comparator) {
	return new tink_state__$Observable_SimpleObservable(f,comparator);
};
tink_state_Observable.auto = function(f,comparator) {
	return new tink_state__$Observable_AutoObservable(f,comparator);
};
tink_state_Observable.const = function(value) {
	return new tink_state_ConstObservable(value);
};
tink_state_Observable.untracked = function(f) {
	tink_state_Observable.stack.push(null);
	return tink_core_TypedError.tryFinally(f,($_=tink_state_Observable.stack,$bind($_,$_.pop)));
};
tink_state_Observable.eq = function(a,b) {
	if(a == null) {
		if(b == null) {
			return true;
		} else {
			return false;
		}
	} else if(b == null) {
		return false;
	} else {
		return tink_state_Observable.get_value(a) == tink_state_Observable.get_value(b);
	}
};
tink_state_Observable.neq = function(a,b) {
	return !tink_state_Observable.eq(a,b);
};
var tink_state_ObservableObject = function() { };
tink_state_ObservableObject.__name__ = true;
tink_state_ObservableObject.prototype = {
	__class__: tink_state_ObservableObject
};
var tink_state__$Observable_SimpleObservable = function(f,comparator) {
	this._poll = f;
	this.comparator = comparator;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_SimpleObservable.prototype = {
	resetCache: function(_) {
		this.cache = null;
	}
	,isValid: function() {
		return this.cache != null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw haxe_Exception.thrown("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw haxe_Exception.thrown("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$Observable_SimpleObservable
};
var tink_state__$Observable_AutoObservable = function(comp,comparator) {
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.trigger = new tink_core_FutureTrigger();
		if(_gthis.dependencies != null) {
			var changed = false;
			var _g = 0;
			var _g1 = _gthis.dependencies;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				if(d.changed()) {
					changed = true;
					break;
				}
			}
			if(changed) {
				var _g = 0;
				var _g1 = _gthis.dependencies;
				while(_g < _g1.length) {
					var d = _g1[_g];
					++_g;
					d.unlink();
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.dependencies;
				while(_g < _g1.length) {
					var d = _g1[_g];
					++_g;
					d.resubscribe(_gthis.trigger);
				}
				var this1 = new tink_core_MPair(_gthis.last,_gthis.trigger);
				var this2 = this1;
				return this2;
			}
		}
		_gthis.dependencies = [];
		_gthis.isSubscribed = new haxe_ds_ObjectMap();
		var this1 = new tink_core_MPair(_gthis.last = comp.f(),_gthis.trigger);
		var this2 = this1;
		return this2;
	},comparator);
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	subscribe: function(dependency,initial) {
		if(!this.isSubscribed.h[dependency.__id__]) {
			this.isSubscribed.set(dependency,true);
			this.dependencies.push(new tink_state__$Observable_DependencyOf(dependency,initial,this.trigger));
		}
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_core_FutureObject = function() { };
tink_core_FutureObject.__name__ = true;
tink_core_FutureObject.prototype = {
	__class__: tink_core_FutureObject
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(callback,_g);
			_g.cells.push(node);
			_g.used++;
			return node;
		}
	}
	,map: function(f) {
		if(this.list == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		if(this.list == null) {
			return f(this.result);
		} else {
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.prototype = {
	ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			while(_g1 < length) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				while(_g1 < added) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				if(_g2.cb != null) {
					if(compacted != i) {
						this.cells[compacted] = _g2;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b = "{";
		var it = this.keys();
		while(it.hasNext()) {
			var i = it.next();
			s_b += Std.string(Std.string(i));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var tink_state__$State_StateObject = function() { };
tink_state__$State_StateObject.__name__ = true;
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
tink_state__$State_StateObject.prototype = {
	__class__: tink_state__$State_StateObject
};
var tink_state__$State_SimpleState = function(value,isEqual,guard) {
	this.guard = guard;
	this.isEqual = isEqual;
	this.value = value;
};
tink_state__$State_SimpleState.__name__ = true;
tink_state__$State_SimpleState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_SimpleState.prototype = {
	isValid: function() {
		return true;
	}
	,poll: function() {
		if(this.next == null) {
			if(this.guard != null) {
				this.value = this.guard(this.value);
			}
			this.arm();
		}
		return this.next;
	}
	,arm: function() {
		this.trigger = new tink_core_FutureTrigger();
		var this1 = new tink_core_MPair(this.value,this.trigger);
		var this2 = this1;
		this.next = this2;
	}
	,differs: function(a,b) {
		if(this.isEqual == null) {
			return a != b;
		} else {
			return !this.isEqual(a,b);
		}
	}
	,getComparator: function() {
		return this.isEqual;
	}
	,set: function(value) {
		if(this.guard != null) {
			if(this.next == null) {
				this.value = this.guard(this.value);
			}
			value = this.guard(value);
		}
		var b = this.value;
		if(this.isEqual == null ? value != b : !this.isEqual(value,b)) {
			this.value = value;
			var last = this.trigger;
			this.arm();
			if(last != null) {
				last.trigger(tink_core_Noise.Noise);
			}
		}
	}
	,__class__: tink_state__$State_SimpleState
};
var tink_state_State = {};
tink_state_State.get_value = function(this1) {
	return tink_state_Observable.get_value(this1);
};
tink_state_State._new = function(value,isEqual,guard) {
	var this1 = new tink_state__$State_SimpleState(value,isEqual,guard);
	return this1;
};
tink_state_State.observe = function(this1) {
	return this1;
};
tink_state_State.transform = function(this1,rules) {
	return new tink_state__$State_CompoundState(tink_state_Observable.map(this1,tink_state_Transform.plain($bind(rules,rules.read))),function(value) {
		this1.set(rules.write(value));
	});
};
tink_state_State.bind = function(this1,options,cb) {
	return tink_state_Observable.bind(this1,options,cb);
};
tink_state_State.toggle = function(s) {
	s.set(!s.poll().a);
};
tink_state_State.toCallback = function(this1) {
	return $bind(this1,this1.set);
};
tink_state_State.compound = function(source,update,comparator) {
	return new tink_state__$State_CompoundState(source,update,comparator);
};
var tink_state_Transform = {};
tink_state_Transform._new = function(f) {
	return f;
};
tink_state_Transform.apply = function(this1,value) {
	return this1(value);
};
tink_state_Transform.naiveAsync = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			var this1 = new tink_core__$Future_SuspendableFuture(function(_) {
				return null;
			});
			return this1;
		case 1:
			return f(p.result);
		case 2:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(p.error)));
		}
	};
	return this1;
};
tink_state_Transform.naive = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			return tink_state_Promised.Done(f(p.result));
		case 2:
			return tink_state_Promised.Failed(p.error);
		}
	};
	return this1;
};
tink_state_Transform.plain = function(f) {
	return f;
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		return "";
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	return s.substring(start,end);
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url_Portion.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_pure_Mapping = {};
tink_pure_Mapping._new = function() {
	var this1 = null;
	return this1;
};
tink_pure_Mapping.exists = function(this1,key) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var p = _g.next();
		if(p.condensed != null) {
			return p.condensed.exists(key);
		} else if(p.key == key) {
			return p.isset;
		}
	}
	return false;
};
tink_pure_Mapping.get = function(this1,key) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var p = _g.next();
		if(p.condensed != null) {
			return p.condensed.get(key);
		} else if(p.key == key) {
			return p.value;
		}
	}
	return null;
};
tink_pure_Mapping.without = function(this1,key) {
	return tink_pure_List.prepend(this1,{ key : key, isset : false, value : null, condensed : null});
};
tink_pure_Mapping.with = function(this1,key,value) {
	return tink_pure_List.prepend(this1,{ key : key, isset : true, value : value, condensed : null});
};
var tink_pure_List = {};
tink_pure_List.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
tink_pure_List.first = function(this1,predicate) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate == null || predicate(x)) {
			return haxe_ds_Option.Some(x);
		}
	}
	return haxe_ds_Option.None;
};
tink_pure_List.last = function(this1,predicate) {
	if(this1 == null) {
		return haxe_ds_Option.None;
	} else if(predicate == null) {
		var _last = null;
		_last = function(v) {
			while(true) {
				var _g = v.tails;
				if(_g.length == 0) {
					return haxe_ds_Option.Some(v.value);
				} else {
					v = _g[_g.length - 1];
					continue;
				}
			}
		};
		return _last(this1);
	} else {
		var found = false;
		var ret = null;
		var _g = new tink_pure_NodeIterator(this1);
		while(_g.list.length > 0) {
			var x = _g.next();
			if(predicate(x)) {
				found = true;
				ret = x;
			}
		}
		if(found) {
			return haxe_ds_Option.Some(ret);
		} else {
			return haxe_ds_Option.None;
		}
	}
};
tink_pure_List.get = function(this1,index) {
	if(index < 0) {
		return haxe_ds_Option.None;
	}
	var iter = new tink_pure_NodeIterator(this1);
	var v = null;
	while(index-- >= 0) {
		if(iter.list.length <= 0) {
			return haxe_ds_Option.None;
		}
		v = iter.next();
	}
	return haxe_ds_Option.Some(v);
};
tink_pure_List._new = function() {
	var this1 = null;
	return this1;
};
tink_pure_List.node = function(this1) {
	return this1;
};
tink_pure_List.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else if(that == null) {
		return this1;
	} else {
		return new tink_pure__$List_Node(this1.length + (that == null ? 0 : that.length),this1.value,this1.tails.concat([that]));
	}
};
tink_pure_List.sort = function(this1,compare) {
	var arr = tink_pure_List.toArray(this1);
	arr.sort(compare);
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.append = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,this1.value,this1.tails.concat([new tink_pure__$List_Node(1,value)]));
	}
};
tink_pure_List.prepend = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,value,[this1]);
	}
};
tink_pure_List.replace = function(this1,select,generate) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		if(select(v)) {
			_g.push(generate(v));
		} else {
			_g.push(v);
		}
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.exists = function(this1,predicate) {
	var ret = false;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			ret = true;
			break;
		}
	}
	return ret;
};
tink_pure_List.count = function(this1,predicate) {
	var ret = 0;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			++ret;
		}
	}
	return ret;
};
tink_pure_List.iterator = function(this1) {
	return new tink_pure_NodeIterator(this1);
};
tink_pure_List.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return new tink_pure_NodeIterator(_e);
	}};
};
tink_pure_List.filter = function(this1,f) {
	if(this1 == null) {
		return null;
	} else {
		return this1.filter(f);
	}
};
tink_pure_List.map = function(this1,f) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var i = _g1.next();
		_g.push(f(i));
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.select = function(this1,f) {
	var arr = [];
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var i = _g.next();
		var _g1 = f(i);
		switch(_g1._hx_index) {
		case 0:
			arr.push(_g1.v);
			break;
		case 1:
			break;
		}
	}
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.fold = function(this1,f,first) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		first = f(x,first);
	}
	return first;
};
tink_pure_List.single = function(v) {
	return new tink_pure__$List_Node(1,v);
};
tink_pure_List.toArray = function(this1) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		_g.push(v);
	}
	return _g;
};
tink_pure_List.fromArray = function(i) {
	var ret = null;
	var len = 0;
	var pos = i.length;
	while(pos-- > 0) ret = new tink_pure__$List_Node(++len,i[pos],ret == null ? tink_pure__$List_Node.EMPTY : [ret]);
	return ret;
};
var tink_pure__$List_Node = function(length,value,tails) {
	this.value = value;
	this.length = length;
	this.tails = tails == null ? tink_pure__$List_Node.EMPTY : tails;
};
tink_pure__$List_Node.__name__ = true;
tink_pure__$List_Node.prototype = {
	filter: function(f) {
		var iter = new tink_pure_NodeIterator(this);
		var ret = [];
		while(iter.list.length > 0) {
			var value = iter.next();
			var res = f(value);
			if(res > 0) {
				ret.push(value);
			}
			if((res & 3) == 3) {
				break;
			}
		}
		return tink_pure_List.fromArray(ret);
	}
	,__class__: tink_pure__$List_Node
};
var spectatory_Location = function() { };
spectatory_Location.__name__ = true;
spectatory_Location.back = function() {
	window.history.back();
};
spectatory_Location.push = function(url) {
	window.history.pushState(null,null,url);
};
spectatory_Location.replace = function(url) {
	window.history.replaceState(null,null,url);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			_g.invoke(value,true);
		}
	}
	,handle: function(callback) {
		if(this.callbacks == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_state_ConstObservable = function(value) {
	var this1 = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	var this2 = this1;
	this.m = this2;
};
tink_state_ConstObservable.__name__ = true;
tink_state_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state_ConstObservable.prototype = {
	poll: function() {
		return this.m;
	}
	,isValid: function() {
		return true;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state_ConstObservable
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	haxe_Log.trace("Hello, world!",{ fileName : "src/Main.hx", lineNumber : 50, className : "Main", methodName : "main"});
	var _g = [];
	_g.push(fomantic_AccItem.create("item" + 0,"content" + 0));
	_g.push(fomantic_AccItem.create("item" + 1,"content" + 1));
	_g.push(fomantic_AccItem.create("item" + 2,"content" + 2));
	_g.push(fomantic_AccItem.create("item" + 3,"content" + 3));
	var accordionListe = new fomantic_AccList({ items : tink_pure_List.fromArray(_g)});
	coconut_vdom_Renderer.mountInto(window.document.body.appendChild(window.document.createElement("div")),App.fromHxx({ },{ router : tink_state_Observable.const(Main.router), elements : tink_state_Observable.const(accordionListe)}));
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	return f;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var coconut_diffing_Widget = function(rendered,mounted,updated,unmounting) {
	this._coco_pendingChildren = [];
	this._coco_alive = false;
	this._coco_invalid = false;
	var _gthis = this;
	this._coco_vStructure = tink_state_Observable.map(rendered,tink_state_Transform.plain(function(r) {
		if(r == null) {
			return _gthis._coco_differ.applicator.placeholder(_gthis);
		} else if(r._hx_index == 2) {
			var nodes = r.nodes;
			var isEmpty = null;
			isEmpty = function(nodes) {
				var _g = 0;
				while(_g < nodes.length) {
					var n = nodes[_g];
					++_g;
					if(n != null) {
						if(n._hx_index == 2) {
							var nodes1 = n.nodes;
							if(!isEmpty(nodes1)) {
								return false;
							}
						} else {
							return false;
						}
					}
				}
				return true;
			};
			if(isEmpty(nodes)) {
				return _gthis._coco_differ.applicator.placeholder(_gthis);
			} else {
				return r;
			}
		} else {
			return r;
		}
	}));
	this._coco_viewMounted = mounted;
	this._coco_viewUpdated = updated;
	this._coco_viewUnmounting = unmounting;
};
coconut_diffing_Widget.__name__ = true;
coconut_diffing_Widget.prototype = {
	_coco_getRender: function(later) {
		if(this._coco_invalid) {
			this._coco_invalid = false;
			var nuSnapshot = this._coco_poll().a;
			this._coco_arm();
			if(nuSnapshot != this._coco_lastSnapshot) {
				this._coco_lastSnapshot = nuSnapshot;
				this._coco_lastRender = this._coco_differ.updateAll(this._coco_lastRender,[nuSnapshot],this,later);
				later(this._coco_viewUpdated);
			}
		}
		return this._coco_lastRender;
	}
	,_coco_poll: function() {
		var _e = this._coco_vStructure;
		return tink_state_Observable.untracked(function() {
			return tink_state_Observable.measure(_e);
		});
	}
	,_coco_scheduleChild: function(child) {
		this._coco_pendingChildren.push(child);
		this._coco_invalidate();
	}
	,_coco_invalidate: function() {
		if(!this._coco_invalid) {
			this._coco_invalid = true;
			if(this._coco_parent != null) {
				this._coco_parent._coco_scheduleChild(this);
			} else {
				var _g = $bind(this,this._coco_update);
				var later = null;
				var tmp = function() {
					_g(later);
				};
				coconut_diffing_Widget.defer(tmp);
			}
		}
	}
	,_coco_updateChildren: function(later) {
		if(this._coco_pendingChildren.length > 0) {
			var _g = 0;
			var _g1 = this._coco_pendingChildren.splice(0,this._coco_pendingChildren.length);
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c._coco_update(later);
			}
		}
	}
	,_coco_performUpdate: function(later) {
		var previous = this._coco_lastRender;
		var next = this._coco_getRender(later);
		this._coco_updateChildren(later);
		if(previous == next) {
			return;
		}
		var previousCount = 0;
		var first = null;
		previous.each(later,function(r) {
			if(first == null) {
				first = r;
			}
			previousCount += 1;
		});
		this._coco_differ.setChildren(later,previousCount,this._coco_differ.applicator.traverseSiblings(first),next);
	}
	,_coco_update: function(later) {
		if(this._coco_invalid && this._coco_alive) {
			if(later == null) {
				this._coco_differ.run($bind(this,this._coco_performUpdate));
			} else {
				this._coco_performUpdate(later);
			}
		}
	}
	,_coco_arm: function() {
		var this1 = this._coco_link;
		if(this1 != null) {
			this1.cancel();
		}
		this._coco_link = this._coco_poll().b.handle(tink_core_Callback.fromNiladic($bind(this,this._coco_invalidate)));
	}
	,_coco_teardown: function() {
		this._coco_alive = false;
		this._coco_viewUnmounting();
		var _g = 0;
		var _g1 = this._coco_lastRender.childList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _this = this._coco_differ;
			switch(c._hx_index) {
			case 0:
				var _g2 = _this.applicator.unsetLastRender(c.r);
				if(_g2 != null) {
					var _g3 = _g2.childList;
					var _g4 = 0;
					while(_g4 < _g3.length) {
						var c1 = _g3[_g4];
						++_g4;
						_this.destroyRender(c1);
					}
				}
				break;
			case 1:
				c.w._coco_teardown();
				break;
			}
		}
	}
	,_coco_initialize: function(differ,parent,later) {
		this._coco_alive = true;
		this._coco_parent = parent;
		this._coco_differ = differ;
		this._coco_lastRender = differ.renderAll([this._coco_lastSnapshot = this._coco_poll().a],this,later);
		this._coco_arm();
		later(this._coco_viewMounted);
	}
	,__class__: coconut_diffing_Widget
};
var coconut_vdom_View = function(render,shouldUpdate,track,beforeRerender,rendered) {
	this.__au = [];
	this.__bc = [];
	this.__bu = [];
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this._coco_revision = this1;
	this.viewId = coconut_vdom_View.idCounter++;
	var _gthis = this;
	var mounted;
	if(rendered != null) {
		var _g = rendered;
		var a1 = true;
		mounted = function() {
			_g(a1);
		};
	} else {
		mounted = null;
	}
	var updated;
	if(rendered != null) {
		var _g1 = rendered;
		var a11 = false;
		updated = function() {
			_g1(a11);
		};
	} else {
		updated = null;
	}
	var firstTime = true;
	var last = null;
	var hasBeforeRerender = beforeRerender != null;
	var hasUpdated = updated != null;
	var lastRev = tink_state_State.get_value(this._coco_revision);
	var renderView = function() {
		var curRev = tink_state_State.get_value(_gthis._coco_revision);
		if(track != null) {
			track();
		}
		if(firstTime) {
			firstTime = false;
		} else {
			if(curRev == lastRev && shouldUpdate != null && !shouldUpdate()) {
				return last;
			}
			var hasCallbacks = _gthis.__bc.length > 0;
			if(hasBeforeRerender || hasCallbacks) {
				tink_state_Observable.untracked(function() {
					if(hasBeforeRerender) {
						beforeRerender();
					}
					if(hasCallbacks) {
						var _g = 0;
						var _g1 = _gthis.__bc.splice(0,_gthis.__bc.length);
						while(_g < _g1.length) {
							var c = _g1[_g];
							++_g;
							tink_core_Callback.invoke(c,false);
						}
					}
				});
			}
		}
		lastRev = curRev;
		last = render();
		return last;
	};
	var this1 = { f : renderView};
	coconut_diffing_Widget.call(this,tink_state_Observable.auto(this1),mounted,function() {
		var hasCallbacks = _gthis.__au.length > 0;
		if(hasUpdated || hasCallbacks) {
			tink_state_Observable.untracked(function() {
				if(hasUpdated) {
					updated();
				}
				if(hasCallbacks) {
					var _g = 0;
					var _g1 = _gthis.__au.splice(0,_gthis.__au.length);
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						tink_core_Callback.invoke(c,tink_core_Noise.Noise);
					}
				}
			});
		}
	},function() {
		last = null;
		firstTime = true;
		_gthis.__beforeUnmount();
	});
};
coconut_vdom_View.__name__ = true;
coconut_vdom_View.__super__ = coconut_diffing_Widget;
coconut_vdom_View.prototype = $extend(coconut_diffing_Widget.prototype,{
	__beforeUnmount: function() {
		var _g = 0;
		var _g1 = this.__bu.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c != null) {
				c.cancel();
			}
		}
		var _g = 0;
		var _g1 = this.__bc.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			tink_core_Callback.invoke(c,true);
		}
	}
	,forceUpdate: function(callback) {
		this._coco_revision.set(tink_state_State.get_value(this._coco_revision) + 1);
		if(callback != null) {
			this.__au.push(tink_core_Callback.fromNiladic(callback));
		}
	}
	,__class__: coconut_vdom_View
});
var coconut_ui_tools_Slot = function(owner,compare,defaultData) {
	this.owner = owner;
	this.compare = compare == null ? function(a,b) {
		return a == b;
	} : compare;
	this.data = this.defaultData = defaultData;
};
coconut_ui_tools_Slot.__name__ = true;
coconut_ui_tools_Slot.__interfaces__ = [tink_state_ObservableObject];
coconut_ui_tools_Slot.prototype = {
	get_value: function() {
		return tink_state_Observable.get_value(this);
	}
	,getComparator: function() {
		return this.compare;
	}
	,poll: function() {
		var _gthis = this;
		if(this.last == null) {
			if(this.data == null) {
				var this1 = new tink_core_MPair(null,new tink_core_FutureTrigger());
				this.last = this1;
			} else {
				this.link = null;
				var m = tink_state_Observable.measure(this.data);
				var changed = new tink_core_FutureTrigger();
				var dFault = null;
				var a;
				var _g = m.a;
				if(_g == null && this.defaultData != null) {
					dFault = tink_state_Observable.measure(this.defaultData);
					a = dFault.a;
				} else {
					a = _g;
				}
				var this1 = new tink_core_MPair(a,changed);
				this.last = this1;
				this.link = m.b.handle($bind(changed,changed.trigger));
				if(dFault != null) {
					this.link = new tink_core__$Callback_LinkPair(this.link,dFault.b.handle($bind(changed,changed.trigger)));
				}
			}
			this.last.b.handle(tink_core_Callback.fromNiladic(function() {
				_gthis.last = null;
			}));
		}
		var this1 = new tink_core_MPair(this.last.a,this.last.b);
		var this2 = this1;
		return this2;
	}
	,isValid: function() {
		if(this.data != null) {
			return this.data.isValid();
		} else {
			return true;
		}
	}
	,observe: function() {
		return this;
	}
	,setData: function(data) {
		if(data == null) {
			data = this.defaultData;
		}
		if(data == this.data) {
			return;
		}
		this.data = data;
		if(this.last != null) {
			var this1 = this.link;
			if(this1 != null) {
				this1.cancel();
			}
			if(data != null) {
				var _e = data;
				var m = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				if(this.compare(m.a,this.last.a)) {
					this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
				} else {
					this.last.b.trigger(tink_core_Noise.Noise);
				}
			}
		}
	}
	,toString: function() {
		return "Slot(" + Std.string(this.owner) + ")";
	}
	,__class__: coconut_ui_tools_Slot
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		var _g2 = tink_core_TypedError.asError(_g1);
		return tink_core_Outcome.Failure(_g2 == null ? report == null ? tink_core_TypedError.withData(null,"Unexpected Error",_g1,pos) : report(_g1) : _g2);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var App = function(__coco_data_) {
	this.__coco_router = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_elements = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
App.__name__ = true;
App.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(App.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
App.__super__ = coconut_vdom_View;
App.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		var __r = [];
		var hxxMeta1 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("menu")},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"bim",null)]));
		__r.push(Pages.fromHxx({ },{ router : tink_state_Observable.const(tink_state_Observable.get_value(this.__coco_router))}));
		var this1 = { f : function() {
			return function(v) {
			};
		}};
		__r.push(fomantic_Calendar.fromHxx({ },{ onChange : tink_state_Observable.auto(this1)}));
		var this1 = { f : function() {
			var __r = [];
			var this1 = { f : function() {
				return "content " + 0;
			}};
			var this11 = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				return [fomantic_Input.fromHxx({ },{ value : tink_state_Observable.const("input$a")})];
			}};
			__r.push(fomantic_AccordionItem.fromHxx({ },{ content : this11, titleView : tink_state_Observable.auto(this1)}));
			var this1 = { f : function() {
				return "content " + 1;
			}};
			var this11 = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				return [fomantic_Input.fromHxx({ },{ value : tink_state_Observable.const("input$a")})];
			}};
			__r.push(fomantic_AccordionItem.fromHxx({ },{ content : this11, titleView : tink_state_Observable.auto(this1)}));
			var this1 = { f : function() {
				return "content " + 2;
			}};
			var this11 = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				return [fomantic_Input.fromHxx({ },{ value : tink_state_Observable.const("input$a")})];
			}};
			__r.push(fomantic_AccordionItem.fromHxx({ },{ content : this11, titleView : tink_state_Observable.auto(this1)}));
			return __r;
		}};
		__r.push(fomantic_Accordion.fromHxx({ },{ className : tink_state_Observable.const(tink_domspec_ClassName.ofString("styled")), children : tink_state_Observable.auto(this1)}));
		var hxxMeta1 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta1.ref,hxxMeta1.key,{ href : "/two"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"totwo",null)]));
		var hxxMeta1 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta1.ref,hxxMeta1.key,{ href : "/other"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"toother",null)]));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	,get_router: function() {
		return tink_state_Observable.get_value(this.__coco_router);
	}
	,get_elements: function() {
		return tink_state_Observable.get_value(this.__coco_elements);
	}
	,toString: function() {
		return "App" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_router.setData(attributes.router);
		this.__coco_elements.setData(attributes.elements);
	}
	,__class__: App
});
var tink_state_ObservableBase = function() {
	this._changes = new tink_core_SignalTrigger();
	this.changes = this._changes;
};
tink_state_ObservableBase.__name__ = true;
tink_state_ObservableBase.prototype = {
	observable: function(ret,when) {
		var _gthis = this;
		return tink_state_Observable.create(function() {
			var ret1 = ret();
			var this1;
			if(when == null) {
				this1 = _gthis.changes;
			} else {
				var _g = when;
				var a1 = ret1;
				var this11 = function(a2) {
					return _g(a1,a2);
				};
				this1 = tink_core_Signal.filter(_gthis.changes,this11,false);
			}
			var ret2 = tink_core_Signal.nextTime(this1).map(function(_) {
				return tink_core_Noise.Noise;
			});
			var this1 = new tink_core_MPair(ret1,ret2.gather());
			var this2 = this1;
			return this2;
		});
	}
	,__class__: tink_state_ObservableBase
};
var tink_state_ObservableMap = function(initial) {
	tink_state_ObservableBase.call(this);
	this.map = initial;
	var _e = this.map;
	this.observableKeys = tink_state_ObservableIterator.make(function() {
		return _e.keys();
	},this.changes,function(c) {
		if(c.from._hx_index == 0) {
			if(c.to._hx_index == 0) {
				return false;
			} else {
				return true;
			}
		} else {
			return true;
		}
	});
	var _e1 = this.map;
	this.observableValues = tink_state_ObservableIterator.make(function() {
		return _e1.iterator();
	},this.changes);
	var _e2 = this.map;
	this.asString = this.observable(function() {
		return _e2.toString();
	});
};
tink_state_ObservableMap.__name__ = true;
tink_state_ObservableMap.__interfaces__ = [haxe_IMap];
tink_state_ObservableMap.__super__ = tink_state_ObservableBase;
tink_state_ObservableMap.prototype = $extend(tink_state_ObservableBase.prototype,{
	observe: function(key) {
		var _e = this.map;
		var _g = function(key) {
			return _e.get(key);
		};
		var key1 = key;
		return this.observable(function() {
			return _g(key1);
		},function(_,c) {
			return c.key == key;
		});
	}
	,get: function(key) {
		return tink_state_Observable.get_value(this.observe(key));
	}
	,set: function(key,value) {
		var _g = this.map.get(key);
		if(value != _g) {
			var from = this.map.exists(key) ? haxe_ds_Option.Some(_g) : haxe_ds_Option.None;
			this.map.set(key,value);
			this._changes.handlers.invoke(new tink_state__$ObservableMap_Update(key,from,haxe_ds_Option.Some(value)));
		}
	}
	,remove: function(key) {
		if(this.map.exists(key)) {
			var from = haxe_ds_Option.Some(this.map.get(key));
			this.map.remove(key);
			this._changes.handlers.invoke(new tink_state__$ObservableMap_Update(key,from,haxe_ds_Option.None));
			return true;
		} else {
			return false;
		}
	}
	,exists: function(key) {
		var _e = this.map;
		var _g = function(key) {
			return _e.exists(key);
		};
		var key1 = key;
		return tink_state_Observable.get_value(this.observable(function() {
			return _g(key1);
		},function(exists,c) {
			return exists == (c.to == haxe_ds_Option.None);
		}));
	}
	,iterator: function() {
		return tink_state_Observable.get_value(this.observableValues);
	}
	,keyValueIterator: function() {
		var _gthis = this;
		var keys = tink_state_Observable.get_value(this.observableKeys);
		return { hasNext : $bind(keys,keys.hasNext), next : function() {
			var key = keys.next();
			return { key : key, value : tink_state_Observable.get_value(_gthis.observe(key))};
		}};
	}
	,keys: function() {
		return tink_state_Observable.get_value(this.observableKeys);
	}
	,toString: function() {
		return tink_state_Observable.get_value(this.asString);
	}
	,clear: function() {
		var key = this.map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.map.remove(key1);
		}
	}
	,copy: function() {
		return new tink_state_ObservableMap(this.map);
	}
	,__class__: tink_state_ObservableMap
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var tink_state_ObservableIterator = function(iterator,changes) {
	this.iterator = iterator;
	this.changes = changes;
};
tink_state_ObservableIterator.__name__ = true;
tink_state_ObservableIterator.__interfaces__ = [tink_state_ObservableObject];
tink_state_ObservableIterator.make = function(iterator,changes,trigger) {
	return new tink_state_ObservableIterator(iterator,tink_core_Signal.select(changes,function(c) {
		if(trigger == null || trigger(c)) {
			return tink_state_ObservableIterator.TRIGGER;
		} else {
			return haxe_ds_Option.None;
		}
	}));
};
tink_state_ObservableIterator.prototype = {
	isValid: function() {
		return true;
	}
	,poll: function() {
		var this1 = new tink_core_MPair(this.iterator(),tink_core_Signal.nextTime(this.changes));
		var this2 = this1;
		return this2;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state_ObservableIterator
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var Pages = function(__coco_data_) {
	var _gthis = this;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(Route.HomePage,false);
	_g.set(Route.OnePage,true);
	_g.set(Route.TwoPage,true);
	this.routes = new tink_state_ObservableMap(_g);
	this.__coco_router = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,function(firstTime) {
		if(firstTime) {
			_gthis.viewDidMount();
		}
	});
};
Pages.__name__ = true;
Pages.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(Pages.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
Pages.__super__ = coconut_vdom_View;
Pages.prototype = $extend(coconut_vdom_View.prototype,{
	goto: function(where) {
		Debug.Log("goto " + Std.string(where),null,{ fileName : "src/Main.hx", lineNumber : 97, className : "Pages", methodName : "goto"});
		var key = tink_state_Observable.get_value(this.routes.observableKeys);
		while(key.hasNext()) {
			var key1 = key.next();
			var value = tink_state_Observable.get_value(this.routes.observe(key1));
			if(value == false) {
				this.routes.set(key1,true);
			}
			if(key1 == where) {
				this.routes.set(key1,false);
			}
		}
	}
	,viewDidMount: function() {
		this.goto(tink_state_Observable.get_value(tink_state_Observable.get_value(this.__coco_router).__coco_route));
	}
	,render: function() {
		var _gthis = this;
		var hxxMeta = { ref : ($_=tink_state_Observable.get_value(this.__coco_router),$bind($_,$_.intercept))};
		var attr = { className : tink_domspec_ClassName.ofString("pages")};
		var __r = [];
		var hxxMeta1 = { };
		var s = Std.string(tink_state_Observable.get_value(tink_state_Observable.get_value(this.__coco_router).__coco_route));
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta1.ref,hxxMeta1.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)]));
		var _g = tink_state_Observable.get_value(tink_state_Observable.get_value(this.__coco_router).__coco_route);
		switch(_g._hx_index) {
		case 0:
			var this1 = { f : function() {
				return tink_state_Observable.get_value(_gthis.routes.observe(Route.HomePage));
			}};
			var tmp = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				var __r = [];
				var this1 = { f : function() {
					return function(e) {
						_gthis.goto(Route.OnePage);
					};
				}};
				__r.push(fomantic_Login.fromHxx({ },{ act : tink_state_Observable.auto(this1)}));
				var this1 = { f : function() {
					return function(e) {
					};
				}};
				__r.push(fomantic_Inscript.fromHxx({ },{ act : tink_state_Observable.auto(this1)}));
				return __r;
			}};
			__r.push(animation_Hideable.fromHxx({ },{ hidden : tmp, children : tink_state_Observable.auto(this1)}));
			break;
		case 1:
			var hxxMeta1 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta1.ref,hxxMeta1.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"one",null)]));
			break;
		case 2:
			var this1 = { f : function() {
				return tink_state_Observable.get_value(_gthis.routes.observe(Route.TwoPage));
			}};
			var tmp = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				return function(e) {
					tink_state_Observable.get_value(_gthis.__coco_router).push(Route.OnePage);
				};
			}};
			__r.push(View2.fromHxx({ },{ hidden : tmp, done : tink_state_Observable.auto(this1)}));
			break;
		case 3:
			__r.push(Unknown.fromHxx({ },{ path : tink_state_Observable.const(_g.path)}));
			break;
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_router: function() {
		return tink_state_Observable.get_value(this.__coco_router);
	}
	,toString: function() {
		return "Pages" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_router.setData(attributes.router);
	}
	,__class__: Pages
});
var View0 = function(__coco_data_) {
	this.__coco_done = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		return tink_pure_List.fromArray([{ title : "one"},{ title : "two"},{ title : "three"}]);
	}};
	this.__coco_contents = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
View0.__name__ = true;
View0.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(View0.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
View0.__super__ = coconut_vdom_View;
View0.prototype = $extend(coconut_vdom_View.prototype,{
	done: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_done);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "done" + " of <" + "View0" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,render: function() {
		var _gthis = this;
		var hxxMeta = { };
		var __r = [];
		__r.push(fomantic_Input.fromHxx({ },{ value : tink_state_Observable.const("bim"), placeholder : tink_state_Observable.const("me")}));
		var this1 = { f : function() {
			return "lock";
		}};
		__r.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.auto(this1)}));
		__r.push(fomantic_Search.fromHxx({ },{ content : tink_state_Observable.const(tink_state_Observable.get_value(this.__coco_contents))}));
		var tmp = tink_state_Observable.const("pop");
		var this1 = { f : function() {
			return "check";
		}};
		var tmp1 = tink_state_Observable.auto(this1);
		var this1 = { f : function() {
			return function(e) {
				Debug.Log(e,null,{ fileName : "src/Main.hx", lineNumber : 205, className : "View0", methodName : "render"});
			};
		}};
		__r.push(fomantic_Button.fromHxx({ },{ text : tmp, img : tmp1, onClick : tink_state_Observable.auto(this1)}));
		var this1 = { f : function() {
			return "circle";
		}};
		var tmp = tink_state_Observable.auto(this1);
		var this1 = { f : function() {
			return function(e) {
				Debug.Log(e,null,{ fileName : "src/Main.hx", lineNumber : 206, className : "View0", methodName : "render"});
			};
		}};
		__r.push(fomantic_IconicInput.fromHxx({ },{ img : tmp, direction : tink_state_Observable.const("left"), act : tink_state_Observable.auto(this1)}));
		var this1 = { f : function() {
			return $bind(_gthis,_gthis.done);
		}};
		__r.push(fomantic_Button.fromHxx({ },{ onClick : tink_state_Observable.auto(this1), text : tink_state_Observable.const("goto")}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	,get_contents: function() {
		return tink_state_Observable.get_value(this.__coco_contents);
	}
	,toString: function() {
		return "View0" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_done.setData(attributes.done);
		this.__coco_contents.setData(attributes.contents);
	}
	,__class__: View0
});
var View1 = function(__coco_data_) {
	this.__coco_hidden = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_done = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
View1.__name__ = true;
View1.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(View1.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
View1.__super__ = coconut_vdom_View;
View1.prototype = $extend(coconut_vdom_View.prototype,{
	done: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_done);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "done" + " of <" + "View1" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,render: function() {
		var _gthis = this;
		var tmp = tink_state_Observable.const(tink_state_Observable.get_value(this.__coco_hidden));
		var this1 = { f : function() {
			var __r = [];
			var hxxMeta = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"One",null)]));
			var this1 = { f : function() {
				return $bind(_gthis,_gthis.done);
			}};
			__r.push(fomantic_Button.fromHxx({ },{ onClick : tink_state_Observable.auto(this1)}));
			return __r;
		}};
		return animation_Hideable.fromHxx({ },{ hidden : tmp, children : tink_state_Observable.auto(this1)});
	}
	,get_hidden: function() {
		return tink_state_Observable.get_value(this.__coco_hidden);
	}
	,toString: function() {
		return "View1" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_hidden.setData(attributes.hidden);
		this.__coco_done.setData(attributes.done);
	}
	,__class__: View1
});
var View2 = function(__coco_data_) {
	this.__coco_hidden = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_done = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
View2.__name__ = true;
View2.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(View2.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
View2.__super__ = coconut_vdom_View;
View2.prototype = $extend(coconut_vdom_View.prototype,{
	done: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_done);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "done" + " of <" + "View2" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,render: function() {
		var _gthis = this;
		var tmp = tink_state_Observable.const(tink_state_Observable.get_value(this.__coco_hidden));
		var this1 = { f : function() {
			var __r = [];
			var hxxMeta = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Two",null)]));
			var this1 = { f : function() {
				return $bind(_gthis,_gthis.done);
			}};
			__r.push(fomantic_Button.fromHxx({ },{ onClick : tink_state_Observable.auto(this1)}));
			return __r;
		}};
		return animation_Hideable.fromHxx({ },{ hidden : tmp, children : tink_state_Observable.auto(this1)});
	}
	,get_hidden: function() {
		return tink_state_Observable.get_value(this.__coco_hidden);
	}
	,toString: function() {
		return "View2" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_hidden.setData(attributes.hidden);
		this.__coco_done.setData(attributes.done);
	}
	,__class__: View2
});
var View3 = function(__coco_data_) {
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
View3.__name__ = true;
View3.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(View3.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
View3.__super__ = coconut_vdom_View;
View3.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Three",null)]);
	}
	,toString: function() {
		return "View3" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
	}
	,__class__: View3
});
var Unknown = function(__coco_data_) {
	this.__coco_path = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
Unknown.__name__ = true;
Unknown.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(Unknown.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
Unknown.__super__ = coconut_vdom_View;
Unknown.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		var __r = [];
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Page not found: ",null));
		var s = tink_state_Observable.get_value(this.__coco_path);
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	,get_path: function() {
		return tink_state_Observable.get_value(this.__coco_path);
	}
	,toString: function() {
		return "Unknown" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_path.setData(attributes.path);
	}
	,__class__: Unknown
});
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.prototype = {
	__class__: tink_core_LinkObject
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var animation_Hideable = function(__coco_data_) {
	this.timeoutHandle = null;
	var _gthis = this;
	this.__coco_hidden = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_fast = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_animationIn = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("fadeIn"));
	this.__coco_animationOut = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("fadeOut"));
	this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
	var this1 = new tink_state__$State_SimpleState(false,null,null);
	this.__coco_shouldRender = this1;
	var this1 = { f : function() {
		return "animated " + (tink_state_Observable.get_value(_gthis.__coco_fast) ? "faster" : "") + " " + (tink_state_Observable.get_value(_gthis.__coco_hidden) ? tink_state_Observable.get_value(_gthis.__coco_animationOut) : tink_state_Observable.get_value(_gthis.__coco_animationIn));
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	var this1 = { f : function() {
		if(tink_state_Observable.get_value(_gthis.__coco_fast)) {
			return 650;
		} else {
			return 1150;
		}
	}};
	this.__coco_timerDelay = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,function(firstTime) {
		if(firstTime) {
			_gthis.viewDidMount();
		}
	});
	var _g = $bind(this,this.viewWillUnmount);
	if(_g != null) {
		var this1 = new tink_core_SimpleLink(_g);
		this.__bu.push(this1);
	}
};
animation_Hideable.__name__ = true;
animation_Hideable.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(animation_Hideable.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
animation_Hideable.__super__ = coconut_vdom_View;
animation_Hideable.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { ref : coconut_ui_Ref._new($bind(this,this._coco_set_element))};
		var attr = { className : tink_domspec_ClassName.ofString(tink_state_Observable.get_value(this.__coco_classes))};
		var __r = [];
		if(tink_state_State.get_value(this.__coco_shouldRender)) {
			var _g = 0;
			var _g1 = tink_state_Observable.get_value(this.__coco_children);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				var _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r.push(_0);
			}
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,viewDidMount: function() {
		var _gthis = this;
		this.element.addEventListener(animation_Hideable.animEndEvent,$bind(this,this.animEnd));
		var this1 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_hidden);
		}};
		tink_state_Observable.bind(tink_state_Observable.auto(this1),{ direct : true},function(hidden) {
			if(hidden) {
				if(_gthis.timeoutHandle != null) {
					window.clearTimeout(_gthis.timeoutHandle);
				}
				var tmp = window;
				var _gthis1 = _gthis;
				var tmp1 = tink_state_Observable.get_value(_gthis.__coco_timerDelay);
				_gthis.timeoutHandle = tmp.setTimeout($bind(_gthis1,_gthis1.animEnd),tmp1);
			} else {
				_gthis.__coco_shouldRender.set(true);
			}
		});
	}
	,viewWillUnmount: function() {
		this.element.removeEventListener(animation_Hideable.animEndEvent,$bind(this,this.animEnd));
	}
	,animEnd: function() {
		if(tink_state_Observable.get_value(this.__coco_hidden)) {
			this.__coco_shouldRender.set(false);
		}
	}
	,get_hidden: function() {
		return tink_state_Observable.get_value(this.__coco_hidden);
	}
	,get_fast: function() {
		return tink_state_Observable.get_value(this.__coco_fast);
	}
	,get_animationIn: function() {
		return tink_state_Observable.get_value(this.__coco_animationIn);
	}
	,get_animationOut: function() {
		return tink_state_Observable.get_value(this.__coco_animationOut);
	}
	,get_children: function() {
		return tink_state_Observable.get_value(this.__coco_children);
	}
	,_coco_set_element: function(param) {
		this.element = param;
	}
	,get_shouldRender: function() {
		return tink_state_State.get_value(this.__coco_shouldRender);
	}
	,set_shouldRender: function(param) {
		this.__coco_shouldRender.set(param);
		return param;
	}
	,toString: function() {
		return "Hideable" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_hidden.setData(attributes.hidden);
		this.__coco_fast.setData(attributes.fast);
		this.__coco_animationIn.setData(attributes.animationIn);
		this.__coco_animationOut.setData(attributes.animationOut);
		this.__coco_children.setData(attributes.children);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,get_timerDelay: function() {
		return tink_state_Observable.get_value(this.__coco_timerDelay);
	}
	,__class__: animation_Hideable
});
var coconut_Ui = function() { };
coconut_Ui.__name__ = true;
var coconut_data_Value = {};
coconut_data_Value.getValue = function(this1) {
	return tink_state_Observable.get_value(this1);
};
coconut_data_Value.or = function(this1,fallback) {
	if(this1 == null) {
		return fallback;
	} else {
		return this1;
	}
};
var coconut_diffing_Applicator = function() { };
coconut_diffing_Applicator.__name__ = true;
coconut_diffing_Applicator.prototype = {
	__class__: coconut_diffing_Applicator
};
var coconut_diffing_Cursor = function() { };
coconut_diffing_Cursor.__name__ = true;
coconut_diffing_Cursor.prototype = {
	__class__: coconut_diffing_Cursor
};
var coconut_diffing_Differ = function(applicator) {
	this.applicator = applicator;
};
coconut_diffing_Differ.__name__ = true;
coconut_diffing_Differ.prototype = {
	_renderAll: function(nodes,later,parent,$with) {
		var byType = new haxe_ds_ObjectMap();
		var childList = [];
		var process = null;
		process = function(nodes) {
			if(nodes != null) {
				var _g = 0;
				while(_g < nodes.length) {
					var n = nodes[_g];
					++_g;
					if(n != null) {
						switch(n._hx_index) {
						case 0:
							var n1 = n.n;
							childList.push(coconut_diffing_RNode.RNative(null,n1,null));
							break;
						case 1:
							var w = n.w;
							$with.widgetInst(w);
							var ref = [null];
							var key = coconut_diffing_Key.ofObject(w);
							var type = coconut_diffing_Differ.WIDGET_INST;
							var n2 = coconut_diffing_RNode.RWidget(w,null);
							var registry;
							var _g1 = byType.h[type.__id__];
							if(_g1 == null) {
								var v = new coconut_diffing_TypeRegistry();
								byType.set(type,v);
								registry = v;
							} else {
								registry = _g1;
							}
							if(ref[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref,[w]));
							}
							if(key == null) {
								registry.put(n2);
							} else {
								registry.set(key,n2);
							}
							childList.push(n2);
							break;
						case 2:
							var nodes1 = n.nodes;
							process(nodes1);
							break;
						case 3:
							var _g2 = n.key;
							var _g3 = n.ref;
							var children = n.children;
							var attr = n.a;
							var type1 = n.type;
							var real = $with.native(type1,_g2,attr,children);
							var ref1 = [_g3];
							var n3 = coconut_diffing_RNode.RNative(attr,real,_g3);
							var registry1;
							var _g4 = byType.h[type1.__id__];
							if(_g4 == null) {
								var v1 = new coconut_diffing_TypeRegistry();
								byType.set(type1,v1);
								registry1 = v1;
							} else {
								registry1 = _g4;
							}
							if(ref1[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref1,[real]));
							}
							if(_g2 == null) {
								registry1.put(n3);
							} else {
								registry1.set(_g2,n3);
							}
							childList.push(n3);
							break;
						case 4:
							var _g5 = n.key;
							var _g6 = n.ref;
							var type2 = n.type;
							var w1 = $with.widget(type2,_g5,n.a);
							var ref2 = [_g6];
							var n4 = coconut_diffing_RNode.RWidget(w1,_g6);
							var registry2;
							var _g7 = byType.h[type2.__id__];
							if(_g7 == null) {
								var v2 = new coconut_diffing_TypeRegistry();
								byType.set(type2,v2);
								registry2 = v2;
							} else {
								registry2 = _g7;
							}
							if(ref2[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref2,[w1]));
							}
							if(_g5 == null) {
								registry2.put(n4);
							} else {
								registry2.set(_g5,n4);
							}
							childList.push(n4);
							break;
						}
					}
				}
			}
		};
		process(nodes);
		return new coconut_diffing_Rendered(byType,childList);
	}
	,renderAll: function(nodes,parent,later) {
		var _gthis = this;
		return this._renderAll(nodes,later,parent,{ native : function(type,_,attr,children) {
			return _gthis.createNative(type,attr,children,parent,later);
		}, widget : function(t,_,a) {
			return _gthis.createWidget(t,a,parent,later);
		}, widgetInst : function(w) {
			_gthis.mountInstance(w,parent,later);
		}});
	}
	,mountInstance: function(w,parent,later) {
		if(w._coco_alive) {
			tink_core_TypedError.withData(null,"Same widget instance mounted twice",w,{ fileName : "coconut/diffing/Differ.hx", lineNumber : 93, className : "coconut.diffing.Differ", methodName : "mountInstance"});
		}
		w._coco_initialize(this,parent,later);
	}
	,createWidget: function(t,a,parent,later) {
		var ret = t.create(a);
		ret._coco_initialize(this,parent,later);
		return ret;
	}
	,updateAll: function(before,nodes,parent,later) {
		var _gthis = this;
		var _g = 0;
		var _g1 = before.childList;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			switch(node._hx_index) {
			case 0:
				var _g2 = node.ref;
				if(_g2 != null) {
					_g2(null);
				}
				break;
			case 1:
				var _g3 = node.ref;
				if(_g3 != null) {
					_g3(null);
				}
				break;
			default:
			}
		}
		var previous = function(t,key) {
			var _g = before.byType.h[t.__id__];
			if(_g == null) {
				return null;
			} else if(key == null) {
				return _g.pull();
			} else {
				return _g.get(key);
			}
		};
		var native = function(type,key,nuAttr,nuChildren) {
			var _g = previous(type,key);
			if(_g == null) {
				return _gthis.createNative(type,nuAttr,nuChildren,parent,later);
			} else if(_g._hx_index == 0) {
				var _g1 = _g.r;
				var oldAttr = _g.a;
				type.update(_g1,oldAttr,nuAttr);
				_gthis._render(nuChildren,_g1,parent,later);
				return _g1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		};
		var after = this._renderAll(nodes,later,parent,{ native : native, widget : function(type,key,attr) {
			var _g = previous(type,key);
			if(_g == null) {
				return _gthis.createWidget(type,attr,parent,later);
			} else if(_g._hx_index == 1) {
				var _g1 = _g.w;
				type.update(attr,_g1);
				return _g1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}, widgetInst : function(w) {
			var _g = previous(coconut_diffing_Differ.WIDGET_INST,coconut_diffing_Key.ofObject(w));
			if(_g == null) {
				_gthis.mountInstance(w,parent,later);
			} else if(_g._hx_index != 1) {
				throw haxe_Exception.thrown("assert");
			}
		}});
		var registry = before.byType.iterator();
		while(registry.hasNext()) {
			var registry1 = registry.next();
			var f = $bind(this,this.destroyRender);
			if(registry1.keyed != null) {
				var v = haxe_ds_StringMap.valueIterator(registry1.keyed.h);
				while(v.hasNext()) {
					var v1 = v.next();
					f(v1);
				}
			}
			if(registry1.unkeyed != null) {
				var _g = 0;
				var _g1 = registry1.unkeyed;
				while(_g < _g1.length) {
					var v2 = _g1[_g];
					++_g;
					f(v2);
				}
			}
		}
		return after;
	}
	,destroyRender: function(r) {
		switch(r._hx_index) {
		case 0:
			var _g = this.applicator.unsetLastRender(r.r);
			if(_g != null) {
				var _g1 = _g.childList;
				var _g = 0;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					this.destroyRender(c);
				}
			}
			break;
		case 1:
			r.w._coco_teardown();
			break;
		}
	}
	,_render: function(nodes,target,parent,later) {
		var lastCount = 0;
		var ret;
		var _g = this.applicator.getLastRender(target);
		if(_g == null) {
			ret = this.renderAll(nodes,parent,later);
		} else {
			lastCount = _g.justCount();
			ret = this.updateAll(_g,nodes,parent,later);
		}
		this.applicator.setLastRender(target,ret);
		this.setChildren(later,lastCount,this.applicator.traverseChildren(target),ret);
		return ret;
	}
	,setChildren: function(later,previousCount,cursor,next,log) {
		var insertedCount = 0;
		var currentCount = 0;
		next.each(later,function(r) {
			currentCount += 1;
			if(r == cursor.current()) {
				cursor.step();
			} else if(cursor.insert(r)) {
				insertedCount += 1;
			}
		});
		var deleteCount = previousCount + insertedCount - currentCount;
		if(log) {
			haxe_Log.trace(deleteCount,{ fileName : "coconut/diffing/Differ.hx", lineNumber : 197, className : "coconut.diffing.Differ", methodName : "setChildren"});
		}
		var _g = 0;
		while(_g < deleteCount) {
			++_g;
			if(!cursor.delete()) {
				break;
			}
		}
	}
	,render: function(virtual,target) {
		var _gthis = this;
		this.run(function(later) {
			return _gthis._render(virtual,target,null,later);
		});
	}
	,run: function(f) {
		var after = [];
		var ret = f(function(later) {
			if(later != null) {
				after.push(later);
			}
		});
		var _g = 0;
		while(_g < after.length) {
			var f = after[_g];
			++_g;
			f();
		}
		return ret;
	}
	,createNative: function(type,attr,children,parent,later) {
		var ret = type.create(attr);
		if(children != null) {
			this._render(children,ret,parent,later);
		}
		return ret;
	}
	,__class__: coconut_diffing_Differ
};
var coconut_diffing_Key = {};
coconut_diffing_Key.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
coconut_diffing_Key.ofObject = function(o) {
	return coconut_diffing_Key.ofFloat(o.__id__ || (o.__id__ = $global.$haxeUID++));
};
var coconut_diffing_KeyMap = {};
coconut_diffing_KeyMap._new = function() {
	var this1 = new haxe_ds_StringMap();
	return this1;
};
coconut_diffing_KeyMap.get = function(this1,key) {
	var _g = this1.h[key];
	if(_g == null) {
		return null;
	} else {
		if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
			delete(this1.h[key]);
		}
		return _g;
	}
};
coconut_diffing_KeyMap.each = function(this1,f) {
	var v = haxe_ds_StringMap.valueIterator(this1.h);
	while(v.hasNext()) {
		var v1 = v.next();
		f(v1);
	}
};
var coconut_diffing_NodeType = function() { };
coconut_diffing_NodeType.__name__ = true;
coconut_diffing_NodeType.prototype = {
	__class__: coconut_diffing_NodeType
};
var coconut_diffing_RNode = $hxEnums["coconut.diffing.RNode"] = { __ename__ : true, __constructs__ : ["RNative","RWidget"]
	,RNative: ($_=function(a,r,ref) { return {_hx_index:0,a:a,r:r,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["a","r","ref"],$_)
	,RWidget: ($_=function(w,ref) { return {_hx_index:1,w:w,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["w","ref"],$_)
};
var coconut_diffing_Rendered = function(byType,childList) {
	this.byType = byType;
	this.childList = childList;
};
coconut_diffing_Rendered.__name__ = true;
coconut_diffing_Rendered.prototype = {
	flatten: function(later) {
		var ret = [];
		this.each(later,function(r) {
			ret.push(r);
		});
		return ret;
	}
	,first: function(later) {
		var found = null;
		try {
			this.each(later,function(r) {
				found = r;
				throw haxe_Exception.thrown(found);
			});
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1 != found) {
				throw haxe_Exception.thrown(_g1);
			}
		}
		return found;
	}
	,justCount: function() {
		var ret = 0;
		var _g = 0;
		var _g1 = this.childList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var ret1;
			switch(c._hx_index) {
			case 0:
				ret1 = 1;
				break;
			case 1:
				ret1 = c.w._coco_lastRender.justCount();
				break;
			}
			ret += ret1;
		}
		return ret;
	}
	,each: function(later,f) {
		var rec = null;
		rec = function(children) {
			var _g = 0;
			while(_g < children.length) {
				var c = children[_g];
				++_g;
				switch(c._hx_index) {
				case 0:
					f(c.r);
					break;
				case 1:
					rec(c.w._coco_getRender(later).childList);
					break;
				}
			}
		};
		rec(this.childList);
	}
	,__class__: coconut_diffing_Rendered
};
var coconut_diffing_TypeRegistry = function() {
};
coconut_diffing_TypeRegistry.__name__ = true;
coconut_diffing_TypeRegistry.prototype = {
	get: function(key) {
		if(this.keyed == null) {
			return null;
		} else {
			var this1 = this.keyed;
			var _g = this1.h[key];
			if(_g == null) {
				return null;
			} else {
				var _this = this1;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				return _g;
			}
		}
	}
	,set: function(key,value) {
		if(this.keyed == null) {
			var this1 = new haxe_ds_StringMap();
			this.keyed = this1;
		}
		if(Object.prototype.hasOwnProperty.call(this.keyed.h,key)) {
			throw haxe_Exception.thrown("duplicate key " + key);
		}
		this.keyed.h[key] = value;
	}
	,put: function(v) {
		if(this.unkeyed == null) {
			this.unkeyed = [];
		}
		this.unkeyed.push(v);
	}
	,pull: function() {
		if(this.unkeyed == null) {
			return null;
		} else {
			return this.unkeyed.shift();
		}
	}
	,__class__: coconut_diffing_TypeRegistry
};
var coconut_diffing_VNode = {};
coconut_diffing_VNode.native = function(type,ref,key,attr,children) {
	return coconut_diffing_VNodeData.VNative(type,ref,key,attr,children);
};
coconut_diffing_VNode.fragment = function(attr,children) {
	return coconut_diffing_VNodeData.VMany(children);
};
var coconut_diffing_VNodeData = $hxEnums["coconut.diffing.VNodeData"] = { __ename__ : true, __constructs__ : ["VNativeInst","VWidgetInst","VMany","VNative","VWidget"]
	,VNativeInst: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["n"],$_)
	,VWidgetInst: ($_=function(w) { return {_hx_index:1,w:w,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["w"],$_)
	,VMany: ($_=function(nodes) { return {_hx_index:2,nodes:nodes,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["nodes"],$_)
	,VNative: ($_=function(type,ref,key,a,children) { return {_hx_index:3,type:type,ref:ref,key:key,a:a,children:children,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a","children"],$_)
	,VWidget: ($_=function(type,ref,key,a) { return {_hx_index:4,type:type,ref:ref,key:key,a:a,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a"],$_)
};
var coconut_ui_ChildrenOf = {};
coconut_ui_ChildrenOf.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
coconut_ui_ChildrenOf.get = function(this1,index) {
	if(this1 == null) {
		return null;
	} else {
		return this1[index];
	}
};
coconut_ui_ChildrenOf.ofSingle = function(r) {
	return [r];
};
coconut_ui_ChildrenOf.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else {
		return this1.concat(that);
	}
};
coconut_ui_ChildrenOf.prepend = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			return coconut_ui_ChildrenOf.ofSingle(r);
		}
	} else if(r == null) {
		return this1;
	} else {
		return [r].concat(this1);
	}
};
coconut_ui_ChildrenOf.append = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			return coconut_ui_ChildrenOf.ofSingle(r);
		}
	} else if(r == null) {
		return this1;
	} else {
		return this1.concat([r]);
	}
};
var coconut_ui_Ref = {};
coconut_ui_Ref._new = function(f) {
	return f;
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var coconut_vdom__$Html_Elt = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_Elt.__name__ = true;
coconut_vdom__$Html_Elt.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Elt.setField = function(target,name,newVal,oldVal) {
	target[name] = newVal;
};
coconut_vdom__$Html_Elt.setStyle = function(target,name,newVal,oldVal) {
	target[name] = newVal == null ? null : newVal;
};
coconut_vdom__$Html_Elt.setProp = function(element,name,newVal,oldVal) {
	switch(name) {
	case "attributes":
		var newProps = newVal;
		var oldProps = oldVal;
		var updateProp = coconut_vdom__$Html_Elt.updateAttribute;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(element,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(element,key,_g3,_g2);
				}
			}
		}
		break;
	case "className":
		if(!newVal) {
			element.removeAttribute("class");
		} else if(newVal == null) {
			if(element.hasAttribute(name)) {
				element.removeAttribute(name);
			} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
				element[name] = null;
			} else {
				delete(element[name]);
			}
		} else {
			element[name] = newVal;
		}
		break;
	case "style":
		var target = element.style;
		var newProps = newVal;
		var oldProps = oldVal;
		var updateProp = coconut_vdom__$Html_Elt.setStyle;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(target,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(target,key,_g3,_g2);
				}
			}
		}
		break;
	default:
		if(newVal == null) {
			if(element.hasAttribute(name)) {
				element.removeAttribute(name);
			} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
				element[name] = null;
			} else {
				delete(element[name]);
			}
		} else {
			element[name] = newVal;
		}
	}
};
coconut_vdom__$Html_Elt.updateAttribute = function(element,name,newVal,oldVal) {
	if(newVal == null) {
		element.removeAttribute(name);
	} else {
		element.setAttribute(name,newVal);
	}
};
coconut_vdom__$Html_Elt.prototype = {
	create: function(attr) {
		var ret = window.document.createElement(this.tag);
		var newProps = attr;
		var oldProps = null;
		var updateProp = coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(ret,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(ret,key,_g3,_g2);
				}
			}
		}
		return ret;
	}
	,update: function(target,old,nu) {
		var newProps = nu;
		var oldProps = old;
		var updateProp = coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(target,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(target,key,_g3,_g2);
				}
			}
		}
	}
	,__class__: coconut_vdom__$Html_Elt
};
var coconut_vdom__$Html_Svg = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_Svg.__name__ = true;
coconut_vdom__$Html_Svg.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Svg.setSvgProp = function(element,name,newVal,oldVal) {
	switch(name) {
	case "className":case "viewBox":
		if(newVal == null) {
			element.removeAttributeNS("http://www.w3.org/2000/svg",name);
		} else {
			element.setAttributeNS("http://www.w3.org/2000/svg",name,newVal);
		}
		break;
	case "xmlns":
		break;
	default:
		if(name in element) {
			switch(name) {
			case "attributes":
				var newProps = newVal;
				var oldProps = oldVal;
				var updateProp = coconut_vdom__$Html_Elt.updateAttribute;
				if(newProps != oldProps) {
					var keys;
					if(newProps == null) {
						newProps = coconut_diffing_Differ.EMPTY;
						keys = oldProps;
					} else if(oldProps == null) {
						oldProps = coconut_diffing_Differ.EMPTY;
						keys = newProps;
					} else {
						var ret = Reflect.copy(newProps);
						var _g = 0;
						var _g1 = Reflect.fields(oldProps);
						while(_g < _g1.length) {
							var key = _g1[_g];
							++_g;
							ret[key] = true;
						}
						keys = ret;
					}
					var _g = 0;
					var _g1 = Reflect.fields(keys);
					while(_g < _g1.length) {
						var key = _g1[_g];
						++_g;
						var _g2 = oldProps[key];
						var _g3 = newProps[key];
						if(_g3 == null) {
							if(_g3 != _g2) {
								updateProp(element,key,_g3,_g2);
							}
						} else if(_g3 != _g2) {
							updateProp(element,key,_g3,_g2);
						}
					}
				}
				break;
			case "className":
				if(!newVal) {
					element.removeAttribute("class");
				} else if(newVal == null) {
					if(element.hasAttribute(name)) {
						element.removeAttribute(name);
					} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
						element[name] = null;
					} else {
						delete(element[name]);
					}
				} else {
					element[name] = newVal;
				}
				break;
			case "style":
				var target = element.style;
				var newProps = newVal;
				var oldProps = oldVal;
				var updateProp = coconut_vdom__$Html_Elt.setStyle;
				if(newProps != oldProps) {
					var keys;
					if(newProps == null) {
						newProps = coconut_diffing_Differ.EMPTY;
						keys = oldProps;
					} else if(oldProps == null) {
						oldProps = coconut_diffing_Differ.EMPTY;
						keys = newProps;
					} else {
						var ret = Reflect.copy(newProps);
						var _g = 0;
						var _g1 = Reflect.fields(oldProps);
						while(_g < _g1.length) {
							var key = _g1[_g];
							++_g;
							ret[key] = true;
						}
						keys = ret;
					}
					var _g = 0;
					var _g1 = Reflect.fields(keys);
					while(_g < _g1.length) {
						var key = _g1[_g];
						++_g;
						var _g2 = oldProps[key];
						var _g3 = newProps[key];
						if(_g3 == null) {
							if(_g3 != _g2) {
								updateProp(target,key,_g3,_g2);
							}
						} else if(_g3 != _g2) {
							updateProp(target,key,_g3,_g2);
						}
					}
				}
				break;
			default:
				if(newVal == null) {
					if(element.hasAttribute(name)) {
						element.removeAttribute(name);
					} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
						element[name] = null;
					} else {
						delete(element[name]);
					}
				} else {
					element[name] = newVal;
				}
			}
		} else if(newVal == null) {
			element.removeAttribute(name);
		} else {
			element.setAttribute(name,newVal);
		}
	}
};
coconut_vdom__$Html_Svg.prototype = {
	create: function(attr) {
		var ret = window.document.createElementNS("http://www.w3.org/2000/svg",this.tag);
		var newProps = attr;
		var oldProps = null;
		var updateProp = coconut_vdom__$Html_Svg.setSvgProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(ret,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(ret,key,_g3,_g2);
				}
			}
		}
		return ret;
	}
	,update: function(target,old,nu) {
		var newProps = nu;
		var oldProps = old;
		var updateProp = coconut_vdom__$Html_Svg.setSvgProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(target,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(target,key,_g3,_g2);
				}
			}
		}
	}
	,__class__: coconut_vdom__$Html_Svg
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var coconut_vdom_Html = function() { };
coconut_vdom_Html.__name__ = true;
coconut_vdom_Html.nodeType = function(tag) {
	var _g = coconut_vdom_Html.nodeTypes.h[tag];
	var tmp;
	if(_g == null) {
		var this1 = coconut_vdom_Html.nodeTypes;
		var v;
		var _g1 = tag.split(":");
		switch(_g1.length) {
		case 1:
			v = new coconut_vdom__$Html_Elt(tag);
			break;
		case 2:
			var _g2 = _g1[0];
			if(_g2 == "svg") {
				v = new coconut_vdom__$Html_Svg(_g1[1]);
			} else {
				throw haxe_Exception.thrown("unknown namespace " + _g2);
			}
			break;
		default:
			throw haxe_Exception.thrown("invalid tag " + tag);
		}
		this1.h[tag] = v;
		tmp = v;
	} else {
		tmp = _g;
	}
	return tmp;
};
coconut_vdom_Html.text = function(value) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,value,null);
};
coconut_vdom_Html.h = function(tag,ref,key,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.nodeType(tag),ref,key,attr,children);
};
coconut_vdom_Html.raw = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_HtmlFragment.byTag(attr.tag),hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.wbr = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.WBR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.video = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.VIDEO,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ul = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.UL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.track = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TRACK,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.tr = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TR,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.title = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TITLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.thead = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.THEAD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.th = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TH,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.tfoot = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TFOOT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.textarea = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TEXTAREA,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.td = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.tbody = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TBODY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.table = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TABLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.svg = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SVG,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.summary = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SUMMARY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.style = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.STYLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.strong = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.STRONG,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.span = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.source = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SOURCE,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.small = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SMALL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.select = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SELECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.section = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SECTION,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.script = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SCRIPT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.rect = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.RECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.pre = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PRE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.polygon = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.POLYGON,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.picture = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PICTURE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.path = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PATH,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.param = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PARAM,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.p = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.option = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OPTION,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ol = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.object = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OBJECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.nav = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.NAV,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.meta = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.META,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.menu = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.MENU,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.main = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.MAIN,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.link = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LINK,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.li = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.label = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LABEL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ins = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.input = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.img = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.IMG,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.iframe = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.IFRAME,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.i = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.html = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HTML,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.hr = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.header = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HEADER,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.head = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HEAD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h6 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H6,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h5 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H5,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h4 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H4,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h3 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H3,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h2 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h1 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.form = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FORM,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.footer = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FOOTER,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.fieldset = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FIELDSET,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.embed = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.EMBED,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.em = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.EM,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ellipse = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ELLIPSE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dt = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dl = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.div = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.details = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DETAILS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.del = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DEL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dd = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.circle = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CIRCLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.canvas = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CANVAS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.button = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.br = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.body = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BODY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.blockquote = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BLOCKQUOTE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.b = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.B,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.audio = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.AUDIO,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.aside = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ASIDE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.article = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ARTICLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.a = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta.ref,hxxMeta.key,attr,children);
};
var coconut_vdom__$Html_HtmlFragment = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_HtmlFragment.__name__ = true;
coconut_vdom__$Html_HtmlFragment.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_HtmlFragment.byTag = function(tag) {
	if(tag == null) {
		tag = "span";
	}
	tag = tag.toUpperCase();
	var _g = coconut_vdom__$Html_HtmlFragment.tags.h[tag];
	if(_g == null) {
		var v = new coconut_vdom__$Html_HtmlFragment(tag);
		coconut_vdom__$Html_HtmlFragment.tags.h[tag] = v;
		return v;
	} else {
		return _g;
	}
};
coconut_vdom__$Html_HtmlFragment.prototype = {
	create: function(a) {
		var ret = window.document.createElement(this.tag);
		ret.className = a.className;
		ret.innerHTML = a.content;
		return ret;
	}
	,update: function(w,old,nu) {
		w.className = nu.className;
		if(old.content != nu.content) {
			w.innerHTML = nu.content;
		}
	}
	,__class__: coconut_vdom__$Html_HtmlFragment
};
var coconut_vdom__$Html_Text = function() {
};
coconut_vdom__$Html_Text.__name__ = true;
coconut_vdom__$Html_Text.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Text.prototype = {
	create: function(text) {
		return window.document.createTextNode(text);
	}
	,update: function(target,old,nu) {
		if(nu != old) {
			target.textContent = nu;
		}
	}
	,__class__: coconut_vdom__$Html_Text
};
var coconut_vdom_RenderResult = {};
coconut_vdom_RenderResult._new = function(n) {
	return n;
};
coconut_vdom_RenderResult.ofText = function(s) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null);
};
coconut_vdom_RenderResult.ofInt = function(i) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,i == null ? "null" : "" + i,null);
};
coconut_vdom_RenderResult.ofNode = function(n) {
	return coconut_diffing_VNodeData.VNativeInst(n);
};
coconut_vdom_RenderResult.ofView = function(v) {
	return coconut_diffing_VNodeData.VWidgetInst(v);
};
var coconut_vdom__$Renderer_DomBackend = function() {
};
coconut_vdom__$Renderer_DomBackend.__name__ = true;
coconut_vdom__$Renderer_DomBackend.__interfaces__ = [coconut_diffing_Applicator];
coconut_vdom__$Renderer_DomBackend.prototype = {
	unsetLastRender: function(target) {
		var ret = target._coco_;
		delete(target["_coco_"]);
		return ret;
	}
	,traverseSiblings: function(first) {
		return new coconut_vdom__$Renderer_DomCursor(first.parentNode,first);
	}
	,traverseChildren: function(parent) {
		return new coconut_vdom__$Renderer_DomCursor(parent,parent.firstChild);
	}
	,placeholder: function(target) {
		return coconut_vdom__$Renderer_DomBackend.PLACEHOLDER;
	}
	,getLastRender: function(target) {
		return target._coco_;
	}
	,setLastRender: function(target,r) {
		target._coco_ = r;
	}
	,__class__: coconut_vdom__$Renderer_DomBackend
};
var coconut_vdom_Renderer = function() { };
coconut_vdom_Renderer.__name__ = true;
coconut_vdom_Renderer.mountInto = function(target,vdom) {
	coconut_vdom_Renderer.DIFFER.render([vdom],target);
};
coconut_vdom_Renderer.getNative = function(view) {
	return coconut_vdom_Renderer.getAllNative(view)[0];
};
coconut_vdom_Renderer.getAllNative = function(view) {
	var _g = view._coco_lastRender;
	if(_g == null) {
		return [];
	} else {
		return _g.flatten(null);
	}
};
coconut_vdom_Renderer.updateAll = function() {
	tink_state_Observable.updateAll();
};
var coconut_vdom__$Renderer_DomCursor = function(parent,cur) {
	this.parent = parent;
	this.cur = cur;
};
coconut_vdom__$Renderer_DomCursor.__name__ = true;
coconut_vdom__$Renderer_DomCursor.__interfaces__ = [coconut_diffing_Cursor];
coconut_vdom__$Renderer_DomCursor.prototype = {
	insert: function(real) {
		var inserted = real.parentNode != this.parent;
		this.parent.insertBefore(real,this.cur);
		return inserted;
	}
	,step: function() {
		var _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			return (this.cur = _g.nextSibling) != null;
		}
	}
	,'delete': function() {
		var _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			this.cur = _g.nextSibling;
			this.parent.removeChild(_g);
			return true;
		}
	}
	,current: function() {
		return this.cur;
	}
	,__class__: coconut_vdom__$Renderer_DomCursor
};
var fomantic_Accordion = function(__coco_data_) {
	var _gthis = this;
	this.__coco_selector = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_elements = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_exclusive = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_onclick = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_animateChildren = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_closeNested = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_collapsible = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	this.__coco_duration = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(500));
	var this1 = { f : function() {
		return "easeInOutQuint";
	}};
	this.__coco_easing = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__coco_onOpening = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onOpen = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onClosing = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onClose = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onChanging = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onChange = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,function(firstTime) {
		if(firstTime) {
			_gthis.viewDidMount();
		}
	});
};
fomantic_Accordion.__name__ = true;
fomantic_Accordion.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Accordion.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Accordion.__super__ = coconut_vdom_View;
fomantic_Accordion.prototype = $extend(coconut_vdom_View.prototype,{
	viewDidMount: function() {
		haxe_Log.trace("mount",{ fileName : "src/fomantic/Accordion.hx", lineNumber : 86, className : "fomantic.Accordion", methodName : "viewDidMount"});
		$(".ui.accordion").accordion({ selector : tink_state_Observable.get_value(this.__coco_selector)},"close",1);
	}
	,render: function() {
		var hxxMeta = { ref : coconut_ui_Ref._new($bind(this,this._coco_set_ME))};
		var attr = { className : tink_domspec_ClassName.add(tink_state_Observable.get_value(this.__coco_className),tink_domspec_ClassName.ofArray(["accordion","ui"]))};
		var __r = [];
		if(tink_state_Observable.get_value(this.__coco_elements) != null) {
			var _g = new tink_pure_NodeIterator(tink_state_State.get_value(tink_state_Observable.get_value(this.__coco_elements).__coco_items));
			while(_g.list.length > 0) {
				var item = _g.next();
				__r.push(fomantic_AccordionItem.fromHxx({ },{ title : item.__coco_title, content : item.__coco_content}));
			}
		} else {
			var _g = 0;
			var _g1 = tink_state_Observable.get_value(this.__coco_children);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				var _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r.push(_0);
			}
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_selector: function() {
		return tink_state_Observable.get_value(this.__coco_selector);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,get_elements: function() {
		return tink_state_Observable.get_value(this.__coco_elements);
	}
	,get_children: function() {
		return tink_state_Observable.get_value(this.__coco_children);
	}
	,get_exclusive: function() {
		return tink_state_Observable.get_value(this.__coco_exclusive);
	}
	,get_onclick: function() {
		return tink_state_Observable.get_value(this.__coco_onclick);
	}
	,get_animateChildren: function() {
		return tink_state_Observable.get_value(this.__coco_animateChildren);
	}
	,get_closeNested: function() {
		return tink_state_Observable.get_value(this.__coco_closeNested);
	}
	,get_collapsible: function() {
		return tink_state_Observable.get_value(this.__coco_collapsible);
	}
	,get_duration: function() {
		return tink_state_Observable.get_value(this.__coco_duration);
	}
	,get_easing: function() {
		return tink_state_Observable.get_value(this.__coco_easing);
	}
	,get_onOpening: function() {
		return tink_state_Observable.get_value(this.__coco_onOpening);
	}
	,get_onOpen: function() {
		return tink_state_Observable.get_value(this.__coco_onOpen);
	}
	,get_onClosing: function() {
		return tink_state_Observable.get_value(this.__coco_onClosing);
	}
	,get_onClose: function() {
		return tink_state_Observable.get_value(this.__coco_onClose);
	}
	,get_onChanging: function() {
		return tink_state_Observable.get_value(this.__coco_onChanging);
	}
	,get_onChange: function() {
		return tink_state_Observable.get_value(this.__coco_onChange);
	}
	,_coco_set_ME: function(param) {
		this.ME = param;
	}
	,toString: function() {
		return "Accordion" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_selector.setData(attributes.selector);
		this.__coco_className.setData(attributes.className);
		this.__coco_elements.setData(attributes.elements);
		this.__coco_children.setData(attributes.children);
		this.__coco_exclusive.setData(attributes.exclusive);
		this.__coco_onclick.setData(attributes.onclick);
		this.__coco_animateChildren.setData(attributes.animateChildren);
		this.__coco_closeNested.setData(attributes.closeNested);
		this.__coco_collapsible.setData(attributes.collapsible);
		this.__coco_duration.setData(attributes.duration);
		this.__coco_easing.setData(attributes.easing);
		this.__coco_onOpening.setData(attributes.onOpening);
		this.__coco_onOpen.setData(attributes.onOpen);
		this.__coco_onClosing.setData(attributes.onClosing);
		this.__coco_onClose.setData(attributes.onClose);
		this.__coco_onChanging.setData(attributes.onChanging);
		this.__coco_onChange.setData(attributes.onChange);
	}
	,__class__: fomantic_Accordion
});
var fomantic_AccList = function(__coco_init) {
	this._updatePerformed = tink_core_Signal.trigger();
	var this1 = new tink_state__$State_SimpleState(__coco_init.items,null,null);
	this.__coco_items = this1;
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core_Signal.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { items : this.__coco_items, isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
		return count > 0;
	}))};
};
fomantic_AccList.__name__ = true;
fomantic_AccList.__interfaces__ = [coconut_data_Model];
fomantic_AccList.prototype = {
	get_items: function() {
		return tink_state_State.get_value(this.__coco_items);
	}
	,__cocoupdate: function(ret) {
		var _gthis = this;
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				_gthis.__coco_transitionCount.set(tink_state_State.get_value(_gthis.__coco_transitionCount) - 1);
			}
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				var existent = tink_Anon.getExistentFields(_g);
				if(Object.prototype.hasOwnProperty.call(existent,"items")) {
					_gthis.__coco_items.set(_g.items);
				}
				_gthis._updatePerformed.handlers.invoke(_g);
				break;
			case 1:
				_gthis.errorTrigger.handlers.invoke(o.failure);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state_State.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,get_updatePerformed: function() {
		return this._updatePerformed;
	}
	,get_isInTransition: function() {
		return tink_state_State.get_value(this.__coco_transitionCount) > 0;
	}
	,__class__: fomantic_AccList
};
var fomantic_AccItem = function(__coco_init) {
	this._updatePerformed = tink_core_Signal.trigger();
	var this1 = new tink_state__$State_SimpleState(__coco_init.title,null,null);
	this.__coco_title = this1;
	var this1 = new tink_state__$State_SimpleState(__coco_init.content,null,null);
	this.__coco_content = this1;
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core_Signal.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { title : this.__coco_title, content : this.__coco_content, isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
		return count > 0;
	}))};
};
fomantic_AccItem.__name__ = true;
fomantic_AccItem.__interfaces__ = [coconut_data_Model];
fomantic_AccItem.create = function(title,content) {
	return new fomantic_AccItem({ title : title, content : content});
};
fomantic_AccItem.prototype = {
	get_title: function() {
		return tink_state_State.get_value(this.__coco_title);
	}
	,get_content: function() {
		return tink_state_State.get_value(this.__coco_content);
	}
	,__cocoupdate: function(ret) {
		var _gthis = this;
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				_gthis.__coco_transitionCount.set(tink_state_State.get_value(_gthis.__coco_transitionCount) - 1);
			}
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				var existent = tink_Anon.getExistentFields(_g);
				if(Object.prototype.hasOwnProperty.call(existent,"title")) {
					_gthis.__coco_title.set(_g.title);
				}
				if(Object.prototype.hasOwnProperty.call(existent,"content")) {
					_gthis.__coco_content.set(_g.content);
				}
				_gthis._updatePerformed.handlers.invoke(_g);
				break;
			case 1:
				_gthis.errorTrigger.handlers.invoke(o.failure);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state_State.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,get_updatePerformed: function() {
		return this._updatePerformed;
	}
	,get_isInTransition: function() {
		return tink_state_State.get_value(this.__coco_transitionCount) > 0;
	}
	,__class__: fomantic_AccItem
};
var fomantic_AccordionItem = function(__coco_data_) {
	this.__coco_title = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_content = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_titleView = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_AccordionItem.__name__ = true;
fomantic_AccordionItem.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_AccordionItem.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_AccordionItem.__super__ = coconut_vdom_View;
fomantic_AccordionItem.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.ofString("accordion_item")};
		var __r = [];
		var hxxMeta1 = { };
		var attr1 = { className : tink_domspec_ClassName.ofString("title")};
		var __r1 = [];
		var this1 = { f : function() {
			return "sort down";
		}};
		__r1.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.auto(this1)}));
		if(tink_state_Observable.get_value(this.__coco_title) != null) {
			var s = tink_state_Observable.get_value(this.__coco_title);
			__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
		} else {
			var _g = 0;
			var _g1 = tink_state_Observable.get_value(this.__coco_titleView);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				var _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r1.push(_0);
			}
		}
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,__r1));
		var tmp = tink_domspec_ClassName.ofString("content");
		var tmp1 = tink_state_Observable.get_value(this.__coco_content);
		__r.push(coconut_vdom_Html.raw({ },{ tag : "div", className : tmp, content : tmp1}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_title: function() {
		return tink_state_Observable.get_value(this.__coco_title);
	}
	,get_content: function() {
		return tink_state_Observable.get_value(this.__coco_content);
	}
	,get_titleView: function() {
		return tink_state_Observable.get_value(this.__coco_titleView);
	}
	,toString: function() {
		return "AccordionItem" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_title.setData(attributes.title);
		this.__coco_content.setData(attributes.content);
		this.__coco_titleView.setData(attributes.titleView);
	}
	,__class__: fomantic_AccordionItem
});
var tink_domspec_ClassName = {};
tink_domspec_ClassName._new = function(s) {
	return s;
};
tink_domspec_ClassName.add = function(this1,that) {
	var _g = that;
	var this2 = this1 == null ? _g : _g == null ? this1 : "" + this1 + " " + _g;
	return this2;
};
tink_domspec_ClassName.ofMap = function(parts) {
	var _g = [];
	var c = haxe_ds_StringMap.keysIterator(parts.h);
	while(c.hasNext()) {
		var c1 = c.next();
		if(parts.h[c1]) {
			_g.push(tink_domspec_ClassName.ofString(c1));
		}
	}
	return tink_domspec_ClassName.ofArray(_g);
};
tink_domspec_ClassName.ofArray = function(parts) {
	var f = tink_domspec_ClassName.ofString;
	var result = new Array(parts.length);
	var _g = 0;
	var _g1 = parts.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(parts[i]);
	}
	return result.join(" ");
};
tink_domspec_ClassName.ofString = function(s) {
	if(s == null) {
		return null;
	} else {
		return StringTools.trim(s);
	}
};
tink_domspec_ClassName.ofDynamicAccess = function(parts) {
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(parts);
	while(_g1 < _g2.length) {
		var c = _g2[_g1];
		++_g1;
		if(parts[c]) {
			_g.push(tink_domspec_ClassName.ofString(c));
		}
	}
	return tink_domspec_ClassName.ofArray(_g);
};
var fomantic_Button = function(__coco_data_) {
	var _gthis = this;
	this.__coco_text = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("ok"));
	this.__coco_img = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onClick = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_loading = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_active = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(true));
	var this1 = { f : function() {
		return "basic";
	}};
	this.__coco_type = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__coco_size = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_toolTip = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		var b = tink_state_Observable.get_value(_gthis.__coco_className);
		if(tink_state_Observable.get_value(_gthis.__coco_disabled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("disabled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_loading)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("loading"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_active)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("active"));
		}
		return b;
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Button.__name__ = true;
fomantic_Button.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Button.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Button.__super__ = coconut_vdom_View;
fomantic_Button.prototype = $extend(coconut_vdom_View.prototype,{
	onClick: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_onClick);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "onClick" + " of <" + "Button" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,setup: function(e) {
		if(tink_state_Observable.get_value(this.__coco_toolTip) != null) {
			e.dataset.tooltip = tink_state_Observable.get_value(this.__coco_toolTip);
		}
	}
	,render: function() {
		var hxxMeta = { ref : coconut_ui_Ref._new($bind(this,this.setup))};
		var attr = { onclick : $bind(this,this.onClick), className : tink_domspec_ClassName.ofString("ui button " + tink_state_Observable.get_value(this.__coco_type) + " " + tink_state_Observable.get_value(this.__coco_size) + " " + tink_state_Observable.get_value(this.__coco_classes))};
		var __r = [];
		if(tink_state_Observable.get_value(this.__coco_img) != null) {
			var tmp = tink_state_Observable.get_value(this.__coco_img);
			__r.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.const(tmp)}));
		}
		var s = tink_state_Observable.get_value(this.__coco_text);
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_text: function() {
		return tink_state_Observable.get_value(this.__coco_text);
	}
	,get_img: function() {
		return tink_state_Observable.get_value(this.__coco_img);
	}
	,get_disabled: function() {
		return tink_state_Observable.get_value(this.__coco_disabled);
	}
	,get_loading: function() {
		return tink_state_Observable.get_value(this.__coco_loading);
	}
	,get_active: function() {
		return tink_state_Observable.get_value(this.__coco_active);
	}
	,get_type: function() {
		return tink_state_Observable.get_value(this.__coco_type);
	}
	,get_size: function() {
		return tink_state_Observable.get_value(this.__coco_size);
	}
	,get_toolTip: function() {
		return tink_state_Observable.get_value(this.__coco_toolTip);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,toString: function() {
		return "Button" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_text.setData(attributes.text);
		this.__coco_img.setData(attributes.img);
		this.__coco_onClick.setData(attributes.onClick);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_loading.setData(attributes.loading);
		this.__coco_active.setData(attributes.active);
		this.__coco_type.setData(attributes.type);
		this.__coco_size.setData(attributes.size);
		this.__coco_toolTip.setData(attributes.toolTip);
		this.__coco_className.setData(attributes.className);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,__class__: fomantic_Button
});
var fomantic_Calendar = function(__coco_data_) {
	var this1 = { f : function() {
		return "date";
	}};
	this.__coco_type = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__coco_inlined = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_onChange = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		return function(date) {
			return DateTools.format(date,"%F");
		};
	}};
	this.__coco_formatDate = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	var this1 = { f : function() {
		return function(date) {
			return DateTools.format(date,"%H:%M");
		};
	}};
	this.__coco_formatTime = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__coco_value = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Calendar.__name__ = true;
fomantic_Calendar.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Calendar.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Calendar.__super__ = coconut_vdom_View;
fomantic_Calendar.prototype = $extend(coconut_vdom_View.prototype,{
	formatDate: function(a0) {
		return (tink_state_Observable.get_value(this.__coco_formatDate))(a0);
	}
	,formatTime: function(a0) {
		return (tink_state_Observable.get_value(this.__coco_formatTime))(a0);
	}
	,render: function() {
		var hxxMeta = { ref : $bind(this,this.setup)};
		var attr = { className : tink_domspec_ClassName.ofString("ui calendar")};
		var children;
		if(!tink_state_Observable.get_value(this.__coco_inlined)) {
			var hxxMeta1 = { };
			var attr1 = { className : tink_domspec_ClassName.ofString("ui input left icon")};
			var __r = [];
			var hxxMeta2 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta2.ref,hxxMeta2.key,{ className : tink_domspec_ClassName.ofString("ui popup calendar")},null));
			var hxxMeta2 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta2.ref,hxxMeta2.key,{ className : tink_domspec_ClassName.ofString("calendar icon")},null));
			var hxxMeta2 = { };
			var attr2 = { type : "text", value : HxOverrides.dateStr(tink_state_Observable.get_value(this.__coco_value))};
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta2.ref,hxxMeta2.key,attr2,null));
			children = coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,__r);
		} else {
			children = null;
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,[children]);
	}
	,setup: function(e) {
		var _gthis = this;
		var tmp = $(e);
		var tmp1 = tink_state_Observable.get_value(this.__coco_type);
		var tmp2 = tink_state_Observable.get_value(this.__coco_inlined);
		tmp.calendar({ type : tmp1, "inline" : tmp2, parser : { date : function(text) {
			if(text == "") {
				return null;
			} else {
				return new Date(text);
			}
		}}, formatter : { time : $bind(this,this._formatTime), date : $bind(this,this._formatDate), cell : function(cell,date,options) {
			var c = cell[0];
			c.style.cursor = "pointer";
			if(!options.disabled) {
				switch(date.getDay()) {
				case 0:
					$(c).addClass("sunday");
					break;
				case 1:
					$(c).addClass("monday");
					break;
				case 2:
					$(c).addClass("tuesday");
					break;
				case 3:
					$(c).addClass("wednesday");
					break;
				case 4:
					$(c).addClass("thursday");
					break;
				case 5:
					$(c).addClass("friday");
					break;
				case 6:
					$(c).addClass("saturday");
					break;
				}
			}
			return cell;
		}}, onChange : function(date,text,mode) {
			if(date == null) {
				return;
			}
			var date1;
			switch(tink_state_Observable.get_value(_gthis.__coco_type)) {
			case "date":
				date1 = new Date(date.getFullYear(),date.getMonth(),date.getDate(),0,0,0);
				break;
			case "datetime":
				date1 = date;
				break;
			case "month":
				date1 = new Date(date.getFullYear(),date.getMonth(),0,0,0,0);
				break;
			case "time":
				date1 = new Date(1970,0,1,date.getHours(),date.getMinutes(),date.getSeconds());
				break;
			case "year":
				date1 = new Date(date.getFullYear(),0,0,0,0,0);
				break;
			}
			(tink_state_Observable.get_value(_gthis.__coco_onChange))(date1);
		}});
	}
	,_formatDate: function(date) {
		if(date == null) {
			return "";
		} else {
			return this.formatDate(date);
		}
	}
	,_formatTime: function(date) {
		if(date == null) {
			return "";
		} else {
			return this.formatTime(date);
		}
	}
	,get_type: function() {
		return tink_state_Observable.get_value(this.__coco_type);
	}
	,get_inlined: function() {
		return tink_state_Observable.get_value(this.__coco_inlined);
	}
	,get_onChange: function() {
		return tink_state_Observable.get_value(this.__coco_onChange);
	}
	,get_value: function() {
		return tink_state_Observable.get_value(this.__coco_value);
	}
	,toString: function() {
		return "Calendar" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_type.setData(attributes.type);
		this.__coco_inlined.setData(attributes.inlined);
		this.__coco_onChange.setData(attributes.onChange);
		this.__coco_formatDate.setData(attributes.formatDate);
		this.__coco_formatTime.setData(attributes.formatTime);
		this.__coco_value.setData(attributes.value);
	}
	,__class__: fomantic_Calendar
});
var fomantic_Form = function(__coco_data_) {
	this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Form.__name__ = true;
fomantic_Form.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Form.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Form.__super__ = coconut_vdom_View;
fomantic_Form.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.ofString("ui form " + tink_state_Observable.get_value(this.__coco_className))};
		var __r = [];
		var _g = 0;
		var _g1 = tink_state_Observable.get_value(this.__coco_children);
		while(_g < (_g1 == null ? 0 : _g1.length)) {
			var child = _g1 == null ? null : _g1[_g];
			++_g;
			var hxxMeta1 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("field")},[child]));
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FORM,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_children: function() {
		return tink_state_Observable.get_value(this.__coco_children);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,toString: function() {
		return "Form" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_children.setData(attributes.children);
		this.__coco_className.setData(attributes.className);
	}
	,__class__: fomantic_Form
});
var fomantic_Icon = function(__coco_data_) {
	var _gthis = this;
	this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_size = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_loading = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_outline = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_img = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_act = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_toolTip = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		var b = tink_state_Observable.get_value(_gthis.__coco_className);
		if(tink_state_Observable.get_value(_gthis.__coco_disabled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("disabled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_loading)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("loading"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_act) != null) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("link"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_outline)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("outline"));
		}
		return b;
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Icon.__name__ = true;
fomantic_Icon.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Icon.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Icon.__super__ = coconut_vdom_View;
fomantic_Icon.prototype = $extend(coconut_vdom_View.prototype,{
	setup: function(el) {
		if(tink_state_Observable.get_value(this.__coco_toolTip) != null) {
			el.dataset.tooltip = tink_state_Observable.get_value(this.__coco_toolTip);
		}
	}
	,render: function() {
		var hxxMeta = { ref : $bind(this,this.setup)};
		var attr = { className : tink_domspec_ClassName.ofString("" + tink_state_Observable.get_value(this.__coco_img) + " icon " + tink_state_Observable.get_value(this.__coco_size) + " " + tink_state_Observable.get_value(this.__coco_classes)), onclick : tink_state_Observable.get_value(this.__coco_act)};
		var __r = [];
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_disabled: function() {
		return tink_state_Observable.get_value(this.__coco_disabled);
	}
	,get_size: function() {
		return tink_state_Observable.get_value(this.__coco_size);
	}
	,get_loading: function() {
		return tink_state_Observable.get_value(this.__coco_loading);
	}
	,get_outline: function() {
		return tink_state_Observable.get_value(this.__coco_outline);
	}
	,get_img: function() {
		return tink_state_Observable.get_value(this.__coco_img);
	}
	,get_act: function() {
		return tink_state_Observable.get_value(this.__coco_act);
	}
	,get_toolTip: function() {
		return tink_state_Observable.get_value(this.__coco_toolTip);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,toString: function() {
		return "Icon" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_size.setData(attributes.size);
		this.__coco_loading.setData(attributes.loading);
		this.__coco_outline.setData(attributes.outline);
		this.__coco_img.setData(attributes.img);
		this.__coco_act.setData(attributes.act);
		this.__coco_toolTip.setData(attributes.toolTip);
		this.__coco_className.setData(attributes.className);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,__class__: fomantic_Icon
});
var fomantic_IconicInput = function(__coco_data_) {
	var _gthis = this;
	this.__coco_value = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(""));
	this.__coco_placeholder = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("..."));
	this.__coco_focus = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_loading = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_error = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_img = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_act = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_direction = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		var b = tink_state_Observable.get_value(_gthis.__coco_className);
		if(tink_state_Observable.get_value(_gthis.__coco_disabled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("disabled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_loading)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("loading"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_error)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("error"));
		}
		return b;
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_IconicInput.__name__ = true;
fomantic_IconicInput.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_IconicInput.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_IconicInput.__super__ = coconut_vdom_View;
fomantic_IconicInput.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.ofString("ui " + tink_state_Observable.get_value(this.__coco_direction) + "  icon  input  " + tink_state_Observable.get_value(this.__coco_classes))};
		var __r = [];
		var hxxMeta1 = { };
		var attr1 = { type : "text", value : tink_state_Observable.get_value(this.__coco_value), placeholder : tink_state_Observable.get_value(this.__coco_placeholder)};
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta1.ref,hxxMeta1.key,attr1,null));
		var tmp = tink_state_Observable.get_value(this.__coco_img);
		__r.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.const(tmp), act : this.__coco_act}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_value: function() {
		return tink_state_Observable.get_value(this.__coco_value);
	}
	,get_placeholder: function() {
		return tink_state_Observable.get_value(this.__coco_placeholder);
	}
	,get_focus: function() {
		return tink_state_Observable.get_value(this.__coco_focus);
	}
	,get_loading: function() {
		return tink_state_Observable.get_value(this.__coco_loading);
	}
	,get_disabled: function() {
		return tink_state_Observable.get_value(this.__coco_disabled);
	}
	,get_error: function() {
		return tink_state_Observable.get_value(this.__coco_error);
	}
	,get_img: function() {
		return tink_state_Observable.get_value(this.__coco_img);
	}
	,get_act: function() {
		return tink_state_Observable.get_value(this.__coco_act);
	}
	,get_direction: function() {
		return tink_state_Observable.get_value(this.__coco_direction);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,toString: function() {
		return "IconicInput" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_value.setData(attributes.value);
		this.__coco_placeholder.setData(attributes.placeholder);
		this.__coco_focus.setData(attributes.focus);
		this.__coco_loading.setData(attributes.loading);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_error.setData(attributes.error);
		this.__coco_img.setData(attributes.img);
		this.__coco_act.setData(attributes.act);
		this.__coco_direction.setData(attributes.direction);
		this.__coco_className.setData(attributes.className);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,__class__: fomantic_IconicInput
});
var fomantic_Input = function(__coco_data_) {
	var _gthis = this;
	this.__coco_value = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(""));
	this.__coco_placeholder = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("..."));
	this.__coco_focus = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_loading = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_error = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_labeled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_fluid = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_transparent = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	var this1 = { f : function() {
		return "text";
	}};
	this.__coco_type = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto(this1));
	this.__coco_direction = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_img = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_name = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onChange = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onFocus = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_onBlur = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_autocomplete = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = { f : function() {
		var b = tink_state_Observable.get_value(_gthis.__coco_className);
		if(tink_state_Observable.get_value(_gthis.__coco_disabled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("disabled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_loading)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("loading"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_focus)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("focus"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_img) != null) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("icon"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_labeled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("labeled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_fluid)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("fluid"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_transparent)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("transparent"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_direction) != null) {
			b = tink_domspec_ClassName.add(b,tink_state_Observable.get_value(_gthis.__coco_direction));
		}
		return b;
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Input.__name__ = true;
fomantic_Input.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Input.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Input.__super__ = coconut_vdom_View;
fomantic_Input.prototype = $extend(coconut_vdom_View.prototype,{
	setup: function(el) {
		this.input = el;
	}
	,clear: function() {
		this.input.value = "";
	}
	,getValue: function() {
		return this.input.value;
	}
	,render: function() {
		var _gthis = this;
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.add(tink_state_Observable.get_value(this.__coco_className),tink_domspec_ClassName.ofString("ui input"))};
		var __r = [];
		var hxxMeta1 = { ref : coconut_ui_Ref._new($bind(this,this.setup))};
		var attr1 = { name : tink_state_Observable.get_value(this.__coco_name), type : "" + tink_state_Observable.get_value(this.__coco_type), value : tink_state_Observable.get_value(this.__coco_value), onfocus : tink_state_Observable.get_value(_gthis.__coco_onFocus), onchange : tink_state_Observable.get_value(_gthis.__coco_onChange), placeholder : tink_state_Observable.get_value(this.__coco_placeholder), onblur : function(e) {
			(tink_state_Observable.get_value(_gthis.__coco_onBlur))(e.target.value);
		}, autocomplete : tink_state_Observable.get_value(this.__coco_autocomplete) ? "on" : "off"};
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta1.ref,hxxMeta1.key,attr1,null));
		if(tink_state_Observable.get_value(this.__coco_img) != null) {
			var tmp = tink_state_Observable.get_value(this.__coco_img);
			__r.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.const(tmp)}));
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_value: function() {
		return tink_state_Observable.get_value(this.__coco_value);
	}
	,get_placeholder: function() {
		return tink_state_Observable.get_value(this.__coco_placeholder);
	}
	,get_focus: function() {
		return tink_state_Observable.get_value(this.__coco_focus);
	}
	,get_loading: function() {
		return tink_state_Observable.get_value(this.__coco_loading);
	}
	,get_disabled: function() {
		return tink_state_Observable.get_value(this.__coco_disabled);
	}
	,get_error: function() {
		return tink_state_Observable.get_value(this.__coco_error);
	}
	,get_labeled: function() {
		return tink_state_Observable.get_value(this.__coco_labeled);
	}
	,get_fluid: function() {
		return tink_state_Observable.get_value(this.__coco_fluid);
	}
	,get_transparent: function() {
		return tink_state_Observable.get_value(this.__coco_transparent);
	}
	,get_type: function() {
		return tink_state_Observable.get_value(this.__coco_type);
	}
	,get_direction: function() {
		return tink_state_Observable.get_value(this.__coco_direction);
	}
	,get_img: function() {
		return tink_state_Observable.get_value(this.__coco_img);
	}
	,get_name: function() {
		return tink_state_Observable.get_value(this.__coco_name);
	}
	,get_onChange: function() {
		return tink_state_Observable.get_value(this.__coco_onChange);
	}
	,get_onFocus: function() {
		return tink_state_Observable.get_value(this.__coco_onFocus);
	}
	,get_onBlur: function() {
		return tink_state_Observable.get_value(this.__coco_onBlur);
	}
	,get_autocomplete: function() {
		return tink_state_Observable.get_value(this.__coco_autocomplete);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,toString: function() {
		return "Input" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_value.setData(attributes.value);
		this.__coco_placeholder.setData(attributes.placeholder);
		this.__coco_focus.setData(attributes.focus);
		this.__coco_loading.setData(attributes.loading);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_error.setData(attributes.error);
		this.__coco_labeled.setData(attributes.labeled);
		this.__coco_fluid.setData(attributes.fluid);
		this.__coco_transparent.setData(attributes.transparent);
		this.__coco_type.setData(attributes.type);
		this.__coco_direction.setData(attributes.direction);
		this.__coco_img.setData(attributes.img);
		this.__coco_name.setData(attributes.name);
		this.__coco_onChange.setData(attributes.onChange);
		this.__coco_onFocus.setData(attributes.onFocus);
		this.__coco_onBlur.setData(attributes.onBlur);
		this.__coco_autocomplete.setData(attributes.autocomplete);
		this.__coco_className.setData(attributes.className);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,__class__: fomantic_Input
});
var fomantic_Inscript = function(__coco_data_) {
	this.__coco_act = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = new tink_state__$State_SimpleState(null,null,null);
	this.__coco_email = this1;
	var this1 = new tink_state__$State_SimpleState(null,null,null);
	this.__coco_name = this1;
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Inscript.__name__ = true;
fomantic_Inscript.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Inscript.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Inscript.__super__ = coconut_vdom_View;
fomantic_Inscript.prototype = $extend(coconut_vdom_View.prototype,{
	act: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_act);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "act" + " of <" + "Inscript" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,gather: function(e) {
		e.preventDefault();
		this.act({ email : tink_state_State.get_value(this.__coco_email), name : tink_state_State.get_value(this.__coco_name)});
	}
	,valid: function(form) {
		$(form).form({ fields : { email : { identifier : "email", rules : [{ type : "empty", prompt : "Please enter your e-mail"},{ type : "email", prompt : "Please enter a valid e-mail"}]}, name : { identifier : "name", rules : [{ type : "empty", prompt : "Please enter your name"},{ type : "length[6]", prompt : "Your name must be at least 6 characters"}]}}});
	}
	,render: function() {
		var _gthis = this;
		var hxxMeta = { ref : $bind(this,this.valid)};
		var attr = { className : tink_domspec_ClassName.ofString("" + tink_state_Observable.get_value(this.__coco_className))};
		var __r = [];
		var this1 = { f : function() {
			var __r = [];
			var this1 = tink_state_Observable.const("name");
			var this11 = { f : function() {
				return "lock";
			}};
			var this12 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return function(e) {
					var param = e.currentTarget.value;
					_gthis.__coco_name.set(param);
				};
			}};
			__r.push(fomantic_Input.fromHxx({ },{ name : this1, img : this12, onChange : tink_state_Observable.auto(this11), placeholder : tink_state_Observable.const("name"), type : tink_state_Observable.const("text")}));
			var this1 = tink_state_Observable.const("email");
			var this11 = { f : function() {
				return "user";
			}};
			var this12 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return function(e) {
					var param = e.currentTarget.value;
					_gthis.__coco_email.set(param);
				};
			}};
			var this13 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return "email";
			}};
			__r.push(fomantic_Input.fromHxx({ },{ name : this1, img : this12, onChange : this13, placeholder : tink_state_Observable.const("email"), type : tink_state_Observable.auto(this11)}));
			var this1 = { f : function() {
				return $bind(_gthis,_gthis.gather);
			}};
			__r.push(fomantic_Button.fromHxx({ },{ text : tink_state_Observable.const("ok"), onClick : tink_state_Observable.auto(this1)}));
			return __r;
		}};
		__r.push(fomantic_Form.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
		var hxxMeta1 = { };
		var __r1 = [];
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("ui error message")},__r1));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,get_email: function() {
		return tink_state_State.get_value(this.__coco_email);
	}
	,set_email: function(param) {
		this.__coco_email.set(param);
		return param;
	}
	,get_name: function() {
		return tink_state_State.get_value(this.__coco_name);
	}
	,set_name: function(param) {
		this.__coco_name.set(param);
		return param;
	}
	,toString: function() {
		return "Inscript" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_act.setData(attributes.act);
		this.__coco_className.setData(attributes.className);
	}
	,__class__: fomantic_Inscript
});
var fomantic_Login = function(__coco_data_) {
	this.__coco_act = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = new tink_state__$State_SimpleState("",null,null);
	this.__coco_email = this1;
	var this1 = new tink_state__$State_SimpleState("",null,null);
	this.__coco_password = this1;
	this.__initAttributes(__coco_data_);
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
fomantic_Login.__name__ = true;
fomantic_Login.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Login.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Login.__super__ = coconut_vdom_View;
fomantic_Login.prototype = $extend(coconut_vdom_View.prototype,{
	act: function(a0) {
		var _g = tink_state_Observable.get_value(this.__coco_act);
		if(_g == null) {
			throw haxe_Exception.thrown("mandatory attribute " + "act" + " of <" + "Login" + "/> was set to null");
		} else {
			_g(a0);
		}
	}
	,gather: function(e) {
		e.preventDefault();
		this.act({ email : tink_state_State.get_value(this.__coco_email), password : tink_state_State.get_value(this.__coco_password)});
	}
	,valid: function(form) {
		$(form).form({ fields : { email : { identifier : "email", rules : [{ type : "empty", prompt : "Please enter your e-mail"},{ type : "email", prompt : "Please enter a valid e-mail"}]}, password : { identifier : "password", rules : [{ type : "empty", prompt : "Please enter your password"},{ type : "length[6]", prompt : "Your password must be at least 6 characters"}]}}});
	}
	,render: function() {
		var _gthis = this;
		var hxxMeta = { ref : $bind(this,this.valid)};
		var attr = { className : tink_domspec_ClassName.ofString("" + tink_state_Observable.get_value(this.__coco_className))};
		var __r = [];
		var this1 = { f : function() {
			var __r = [];
			var this1 = tink_state_Observable.const("password");
			var this11 = { f : function() {
				return "lock";
			}};
			var this12 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return function(e) {
					var param = e.currentTarget.value;
					_gthis.__coco_password.set(param);
				};
			}};
			var this13 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return "password";
			}};
			__r.push(fomantic_Input.fromHxx({ },{ name : this1, img : this12, onChange : this13, placeholder : tink_state_Observable.const("paswword"), type : tink_state_Observable.auto(this11)}));
			var this1 = tink_state_Observable.const("email");
			var this11 = { f : function() {
				return "user";
			}};
			var this12 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return function(e) {
					var param = e.currentTarget.value;
					_gthis.__coco_email.set(param);
				};
			}};
			var this13 = tink_state_Observable.auto(this11);
			var this11 = { f : function() {
				return "password";
			}};
			__r.push(fomantic_Input.fromHxx({ },{ name : this1, img : this12, onChange : this13, placeholder : tink_state_Observable.const("name"), type : tink_state_Observable.auto(this11)}));
			var this1 = { f : function() {
				return $bind(_gthis,_gthis.gather);
			}};
			__r.push(fomantic_Button.fromHxx({ },{ text : tink_state_Observable.const("ok"), onClick : tink_state_Observable.auto(this1)}));
			return __r;
		}};
		__r.push(fomantic_Form.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
		var hxxMeta1 = { };
		var __r1 = [];
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("ui error message")},__r1));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,get_email: function() {
		return tink_state_State.get_value(this.__coco_email);
	}
	,set_email: function(param) {
		this.__coco_email.set(param);
		return param;
	}
	,get_password: function() {
		return tink_state_State.get_value(this.__coco_password);
	}
	,set_password: function(param) {
		this.__coco_password.set(param);
		return param;
	}
	,toString: function() {
		return "Login" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_act.setData(attributes.act);
		this.__coco_className.setData(attributes.className);
	}
	,__class__: fomantic_Login
});
var fomantic_Search = function(__coco_data_) {
	var _gthis = this;
	this.__coco_placeholder = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const("..."));
	this.__coco_fluid = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_content = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_url = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_aligned = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_loading = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_searchOnFocus = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
	this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
	var this1 = new tink_state__$State_SimpleState({ title : "bim"},null,null);
	this.__coco_value = this1;
	var this1 = { f : function() {
		var b = tink_state_Observable.get_value(_gthis.__coco_className);
		if(tink_state_Observable.get_value(_gthis.__coco_disabled)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("disabled"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_loading)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("loading"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_searchOnFocus)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("searchonfocus"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_fluid)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("fluid"));
		}
		if(tink_state_Observable.get_value(_gthis.__coco_aligned)) {
			b = tink_domspec_ClassName.add(b,tink_domspec_ClassName.ofString("aligned"));
		}
		return b;
	}};
	this.__coco_classes = tink_state_Observable.auto(this1);
	this.__initAttributes(__coco_data_);
	var track = function() {
		tink_state_Observable.get_value(_gthis.__coco_content);
	};
	coconut_vdom_View.call(this,$bind(this,this.render),null,track,null,function(firstTime) {
		if(firstTime) {
			_gthis.viewDidMount();
		}
	});
};
fomantic_Search.__name__ = true;
fomantic_Search.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(fomantic_Search.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
fomantic_Search.__super__ = coconut_vdom_View;
fomantic_Search.prototype = $extend(coconut_vdom_View.prototype,{
	setup: function(e) {
		var _gthis = this;
		$(e).search({ source : tink_pure_List.toArray(tink_state_Observable.get_value(this.__coco_content)), searchFields : ["title"], fullTextSearch : false, onSelect : function(result,response) {
			haxe_Log.trace("send" + result.title,{ fileName : "src/fomantic/Search.hx", lineNumber : 52, className : "fomantic.Search", methodName : "setup"});
			_gthis.__coco_value.set(result);
			haxe_Log.trace("res=" + result.title,{ fileName : "src/fomantic/Search.hx", lineNumber : 54, className : "fomantic.Search", methodName : "setup"});
		}, error : { source : "Cannot search. No source used, and Semantic API module was not included", noResults : "pas d'incrits", logging : "Error in debug logging, exiting.", noTemplate : "A valid template name was not specified.", serverError : "There was an issue with querying the server.", maxResults : "Results must be an array to use maxResults setting", method : "The method you called is not defined."}, onChange : function(value,text) {
			if(onChange != null) {
				onChange(value);
			}
		}});
	}
	,viewDidMount: function() {
		haxe_Log.trace(tink_state_Observable.get_value(this.__coco_content),{ fileName : "src/fomantic/Search.hx", lineNumber : 79, className : "fomantic.Search", methodName : "viewDidMount"});
	}
	,render: function() {
		haxe_Log.trace("rendering saerch",{ fileName : "src/fomantic/Search.hx", lineNumber : 95, className : "fomantic.Search", methodName : "render"});
		var hxxMeta = { ref : $bind(this,this.setup)};
		var attr = { className : tink_domspec_ClassName.ofString("ui search " + tink_state_Observable.get_value(this.__coco_classes) + " ")};
		var __r = [];
		var hxxMeta1 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("prompt"), type : "text", placeholder : "Common passwords..."},null));
		var this1 = { f : function() {
			return "search";
		}};
		__r.push(fomantic_Icon.fromHxx({ },{ img : tink_state_Observable.auto(this1)}));
		var hxxMeta1 = { };
		var __r1 = [];
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("results")},__r1));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,get_placeholder: function() {
		return tink_state_Observable.get_value(this.__coco_placeholder);
	}
	,get_fluid: function() {
		return tink_state_Observable.get_value(this.__coco_fluid);
	}
	,get_disabled: function() {
		return tink_state_Observable.get_value(this.__coco_disabled);
	}
	,get_content: function() {
		return tink_state_Observable.get_value(this.__coco_content);
	}
	,get_url: function() {
		return tink_state_Observable.get_value(this.__coco_url);
	}
	,get_aligned: function() {
		return tink_state_Observable.get_value(this.__coco_aligned);
	}
	,get_loading: function() {
		return tink_state_Observable.get_value(this.__coco_loading);
	}
	,get_searchOnFocus: function() {
		return tink_state_Observable.get_value(this.__coco_searchOnFocus);
	}
	,get_className: function() {
		return tink_state_Observable.get_value(this.__coco_className);
	}
	,get_value: function() {
		return tink_state_State.get_value(this.__coco_value);
	}
	,set_value: function(param) {
		this.__coco_value.set(param);
		return param;
	}
	,toString: function() {
		return "Search" + "#" + this.viewId;
	}
	,__initAttributes: function(attributes) {
		this.__coco_placeholder.setData(attributes.placeholder);
		this.__coco_fluid.setData(attributes.fluid);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_content.setData(attributes.content);
		this.__coco_url.setData(attributes.url);
		this.__coco_aligned.setData(attributes.aligned);
		this.__coco_loading.setData(attributes.loading);
		this.__coco_searchOnFocus.setData(attributes.searchOnFocus);
		this.__coco_className.setData(attributes.className);
	}
	,get_classes: function() {
		return tink_state_Observable.get_value(this.__coco_classes);
	}
	,__class__: fomantic_Search
});
var fomantic_Types = function() { };
fomantic_Types.__name__ = true;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	while(true) {
		if(node != null) {
			haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
			acc.push(node.value);
			node = node.right;
			continue;
		}
		return;
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqEltsIterator.__name__ = true;
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
	,__class__: js_jquery_JqEltsIterator
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqIterator.__name__ = true;
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
	,__class__: js_jquery_JqIterator
};
var tink_Anon = function() { };
tink_Anon.__name__ = true;
tink_Anon.getExistentFields = function(o) {
	var ret = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		ret[f] = true;
	}
	return ret;
};
var tink_Stringly = {};
tink_Stringly.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(0 < max && s.charCodeAt(0) == 45) {
		pos = 1;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink_Stringly.toBool = function(this1) {
	if(this1 != null) {
		switch(StringTools.trim(this1).toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink_Stringly.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	if(tink_Stringly.isNumber(_g,true)) {
		return tink_core_Outcome.Success(parseFloat(_g));
	} else {
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + _g + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 60, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink_Stringly.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseFloat(this1));
};
tink_Stringly.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	if(tink_Stringly.isNumber(_g,false)) {
		return tink_core_Outcome.Success(Std.parseInt(_g));
	} else {
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + _g + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 71, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink_Stringly.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseInt(this1));
};
tink_Stringly.parseDate = function(this1) {
	var _g = tink_Stringly.parseFloat(this1);
	switch(_g._hx_index) {
	case 0:
		var f = _g.data;
		return tink_core_Outcome.Success(new Date(f));
	case 1:
		var _g1 = _g.failure;
		if(!tink_Stringly.SUPPORTED_DATE_REGEX.match(this1)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 92, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		}
		var date = new Date(this1);
		var f = date.getTime();
		if(isNaN(f)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 95, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		} else {
			return tink_core_Outcome.Success(date);
		}
		break;
	}
};
tink_Stringly.toDate = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseDate(this1));
};
tink_Stringly.parse = function(this1,f) {
	var _g = f;
	var a1 = this1;
	return tink_core_TypedError.catchExceptions(function() {
		return _g(a1);
	},null,{ fileName : "tink/Stringly.hx", lineNumber : 155, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
};
tink_Stringly.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink_Stringly.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink_Stringly.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
tink_Stringly.ofDate = function(d) {
	var f = d.getTime();
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		return ret;
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var ret = f[0].map((function() {
					return function(result) {
						return results.concat([result]);
					};
				})());
				return ret;
			};
		})(f));
		ret = ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var ret = a.map(haxe_ds_Either.Left);
	var ret1 = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(ret,ret1);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return map(o.data);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var ret = map(o.data).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.busy = false;
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.busy) {
			throw haxe_Exception.thrown(new tink_core_TypedError(null,"circular lazyness",{ fileName : "tink/core/Lazy.hx", lineNumber : 54, className : "tink.core._Lazy.LazyFunc", methodName : "get"}));
		}
		if(this.f != null) {
			this.busy = true;
			this.result = this.f();
			this.f = null;
			this.busy = false;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		return o.v == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		return haxe_ds_Option.Some(f(o.v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		return [o.v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		this.value = o.v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		var _g = outcome.failure;
		var _g1 = tink_core_TypedError.asError(_g);
		if(_g1 == null) {
			throw haxe_Exception.thrown(_g);
		} else {
			return _g1.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return haxe_ds_Option.Some(outcome.data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		return tink_core_Outcome.Success(option.v);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(transform(outcome.data));
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(v);
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		return f(outcome.data);
	case 1:
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(outcome.failure)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		return tink_core_Outcome.Failure(report(haxe_Exception.caught(_g).unwrap()));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Success(_g.data);
		case 1:
			return tink_core_Outcome.Failure(_g.failure);
		}
		break;
	case 1:
		return tink_core_Outcome.Failure(o.failure);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return tink_core_Outcome.Failure(o.failure);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = f(o.data);
			switch(_g._hx_index) {
			case 0:
				return tink_core_Outcome.Success(_g.data);
			case 1:
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(_g.failure));
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(o.failure));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var _g = value.v;
				if(_g.a != v || !tink_core_TotalTools.eq(_g.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index != 1) {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_ProgressObject = function() { };
tink_core_ProgressObject.__name__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
tink_core_CompositeProgress.__name__ = true;
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			if(_g1.a != v || !tink_core_TotalTools.eq(_g1.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			break;
		}
	}
	,finish: function(v) {
		if(this.value._hx_index != 1) {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
tink_core_FutureProgress.__name__ = true;
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return o.data.map(tink_core_Outcome.Success);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				o.data.listen(cb);
				break;
			case 1:
				break;
			}
		});
	}));
};
tink_core_PromiseProgress.__name__ = true;
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		return haxe_ds_Option.Some(this1.a / o.v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else if(s.length - _g > dp) {
		return HxOverrides.substr(s,0,dp + _g + 1) + "%";
	} else {
		return StringTools.rpad(s,"0",_g + dp + 1) + "%";
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = true;
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			return a.v == b.v;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			return f(o.failure);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o.data));
		case 1:
			return f(o.failure);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			return o;
		case 1:
			return tink_core_Outcome.Failure(f(o.failure));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						$yield(o.data).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									cb(tink_core_Outcome.Success(_g.v));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								cb(tink_core_Outcome.Failure(o.failure));
								break;
							}
						});
						break;
					case 1:
						cb(tink_core_Outcome.Failure(o.failure));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				return f(o.failure);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				resolve(o.data);
				break;
			case 1:
				reject(new tink_core__$Promise_TinkError(o.failure));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				linkArray.push(iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						set(index,o.data);
						break;
					case 1:
						fail(o.failure);
						break;
					}
				}));
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
tink_core__$Promise_TinkError.__name__ = true;
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_domspec_EventFrom = {};
tink_domspec_EventFrom.get_currentTarget = function(this1) {
	return this1.currentTarget;
};
tink_domspec_EventFrom.get_target = function(this1) {
	return this1.target;
};
tink_domspec_EventFrom.get_src = function(this1) {
	return this1.currentTarget;
};
var tink_domspec_CSSParser = function() { };
tink_domspec_CSSParser.__name__ = true;
tink_domspec_CSSParser.parseString = function(s) {
	tink_domspec_CSSParser.style.cssText = s;
	var ret = { };
	var ret1 = ret;
	var _g = 0;
	var _g1 = tink_domspec_CSSParser.style;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		ret1[name] = tink_domspec_CSSParser.style.getPropertyValue(name);
	}
	return ret;
};
var tink_macro_Bouncer = function() { };
tink_macro_Bouncer.__name__ = true;
tink_macro_Bouncer.makeOuter = function(a) {
	return null;
};
var tink_macro_DirectType = function() { };
tink_macro_DirectType.__name__ = true;
var tink_pure_FilterResult = {};
tink_pure_FilterResult.include = function(this1) {
	return this1 > 0;
};
tink_pure_FilterResult.stop = function(this1) {
	return (this1 & 3) == 3;
};
tink_pure_FilterResult.fromBool = function(b) {
	if(b) {
		return 1;
	} else {
		return 0;
	}
};
var tink_pure_NodeIterator = function(node) {
	this.list = [];
	if(node != null) {
		this.list.push(node);
	}
};
tink_pure_NodeIterator.__name__ = true;
tink_pure_NodeIterator.prototype = {
	hasNext: function() {
		return this.list.length > 0;
	}
	,next: function() {
		var _g = this.list.pop();
		if(_g == null) {
			return null;
		} else {
			var _g1 = -_g.tails.length;
			while(_g1 < 0) {
				var i = _g1++;
				this.list.push(_g.tails[-i - 1]);
			}
			return _g.value;
		}
	}
	,__class__: tink_pure_NodeIterator
};
var tink_pure__$List_ReplaceSelector = {};
tink_pure__$List_ReplaceSelector.const = function(v) {
	return function(i) {
		return i == v;
	};
};
var tink_pure__$List_ReplaceGenerator = {};
tink_pure__$List_ReplaceGenerator.const = function(v) {
	return function(_) {
		return v;
	};
};
var tink_state_Measurement = {};
tink_state_Measurement.get_value = function(this1) {
	return this1.a;
};
tink_state_Measurement.get_becameInvalid = function(this1) {
	return this1.b;
};
tink_state_Measurement._new = function(value,becameInvalid) {
	var this1 = new tink_core_MPair(value,becameInvalid);
	var this2 = this1;
	return this2;
};
var tink_state_Computation = {};
tink_state_Computation._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_state_Computation.perform = function(this1) {
	return this1.f();
};
tink_state_Computation.async = function(f) {
	var this1 = { f : f};
	var o = tink_state_Observable.map(tink_state_Observable.auto(this1),tink_state_Transform.plain(tink_state_Observable.ofPromise));
	var this1 = { f : function() {
		return tink_state_Observable.get_value(tink_state_Observable.get_value(o));
	}};
	return this1;
};
tink_state_Computation.asyncWithLast = function(f) {
	var last = haxe_ds_Option.None;
	var this1 = { f : function() {
		return f(last);
	}};
	var o = tink_state_Observable.map(tink_state_Observable.auto(this1),tink_state_Transform.plain(tink_state_Observable.ofPromise));
	var this1 = { f : function() {
		var ret = tink_state_Observable.get_value(tink_state_Observable.get_value(o));
		if(ret._hx_index == 1) {
			last = haxe_ds_Option.Some(ret.result);
		}
		return ret;
	}};
	return this1;
};
tink_state_Computation.plain = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_state_Computation.withLast = function(f) {
	var last = haxe_ds_Option.None;
	var this1 = { f : function() {
		var ret = f(last);
		last = haxe_ds_Option.Some(ret);
		return ret;
	}};
	return this1;
};
var tink_state__$Observable_Dependency = function() { };
tink_state__$Observable_Dependency.__name__ = true;
tink_state__$Observable_Dependency.prototype = {
	__class__: tink_state__$Observable_Dependency
};
var tink_state__$Observable_DependencyOf = function(data,initial,trigger) {
	this.data = data;
	this.comparator = data.getComparator();
	this.last = initial.a;
	this.link = initial.b.handle($bind(trigger,trigger.trigger));
};
tink_state__$Observable_DependencyOf.__name__ = true;
tink_state__$Observable_DependencyOf.__interfaces__ = [tink_state__$Observable_Dependency];
tink_state__$Observable_DependencyOf.prototype = {
	changed: function() {
		var _g = this.comparator;
		if(_g == null) {
			return this.last != tink_state_Observable.get_value(this.data);
		} else {
			return !_g(this.last,tink_state_Observable.get_value(this.data));
		}
	}
	,unlink: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,resubscribe: function(trigger) {
		var next = tink_state_Observable.measure(this.data).b.handle(function(_) {
			trigger.trigger(tink_core_Noise.Noise);
		});
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		this.link = next;
	}
	,__class__: tink_state__$Observable_DependencyOf
};
var tink_state__$ObservableMap_Update = function(key,from,to) {
	this.key = key;
	this.from = from;
	this.to = to;
};
tink_state__$ObservableMap_Update.__name__ = true;
tink_state__$ObservableMap_Update.prototype = {
	__class__: tink_state__$ObservableMap_Update
};
var tink_state_Promised = $hxEnums["tink.state.Promised"] = { __ename__ : true, __constructs__ : ["Loading","Done","Failed"]
	,Loading: {_hx_index:0,__enum__:"tink.state.Promised",toString:$estr}
	,Done: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["error"],$_)
};
var tink_state_PromisedTools = function() { };
tink_state_PromisedTools.__name__ = true;
tink_state_PromisedTools.next = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_core_Promise.ofSpecific(tink_core_Promise.NEVER);
	case 1:
		return f(a.result);
	case 2:
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(a.error)));
	}
};
tink_state_PromisedTools.map = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		return tink_state_Promised.Done(f(a.result));
	case 2:
		return tink_state_Promised.Failed(a.error);
	}
};
tink_state_PromisedTools.flatMap = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		return f(a.result);
	case 2:
		return tink_state_Promised.Failed(a.error);
	}
};
tink_state_PromisedTools.toOption = function(p) {
	if(p._hx_index == 1) {
		return haxe_ds_Option.Some(p.result);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_state_PromisedTools.or = function(p,l) {
	if(p._hx_index == 1) {
		return p.result;
	} else {
		return l.get();
	}
};
tink_state_PromisedTools.orNull = function(p) {
	if(p._hx_index == 1) {
		return p.result;
	} else {
		return null;
	}
};
tink_state_PromisedTools.all = function(p) {
	var ret = [];
	var p1 = $getIterator(p);
	while(p1.hasNext()) {
		var p = p1.next();
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			ret.push(p.result);
			break;
		case 2:
			return tink_state_Promised.Failed(p.error);
		}
	}
	return tink_state_Promised.Done(ret);
};
var tink_state__$State_CompoundState = function(data,set,comparator) {
	this.data = data;
	this.update = set;
	this.comparator = comparator;
};
tink_state__$State_CompoundState.__name__ = true;
tink_state__$State_CompoundState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_CompoundState.prototype = {
	isValid: function() {
		return this.data.isValid();
	}
	,poll: function() {
		return tink_state_Observable.measure(this.data);
	}
	,set: function(value) {
		this.update(value);
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$State_CompoundState
};
var tink_url_Auth = {};
tink_url_Auth._new = function(user,password) {
	var this1 = "" + user + ":" + password;
	return this1;
};
tink_url_Auth.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url_Auth.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url_Auth.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else {
		return "" + this1 + "@";
	}
};
var tink_url_Query = {};
tink_url_Query.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.with = function(this1,values) {
	var this2 = [];
	var ret = this2;
	var _g = [];
	var key = values.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		_g.push(key1);
	}
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		if(values.exists(tink_url_Portion.ofString(p1.name))) {
			ret.push(tink_url_Portion.ofString(p1.name) + "=" + values.get(tink_url_Portion.ofString(p1.name)));
			HxOverrides.remove(_g,tink_url_Portion.ofString(p1.name));
		} else {
			ret.push(tink_url_Portion.ofString(p1.name) + "=" + p1.value);
		}
	}
	var _g1 = 0;
	while(_g1 < _g.length) {
		var name = _g[_g1];
		++_g1;
		ret.push(name + "=" + values.get(name));
	}
	return ret.join("&");
};
tink_url_Query.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		_g.h[p1.name.toString()] = p1.value;
	}
	return _g;
};
tink_url_Query.ofObj = function(v) {
	var this1 = [];
	var ret = this1;
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url_Portion.ofString(k) + "=" + tink_url_Portion.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url_Query.toString = function(this1) {
	return this1;
};
tink_url_Query.build = function() {
	var this1 = [];
	return this1;
};
tink_url_Query.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url_QueryStringBuilder = {};
tink_url_QueryStringBuilder._new = function() {
	var this1 = [];
	return this1;
};
tink_url_QueryStringBuilder.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url_QueryStringBuilder.toString = function(this1,sep) {
	if(sep == null) {
		sep = "&";
	}
	return this1.join(sep);
};
tink_url_QueryStringBuilder.copy = function(this1) {
	return this1.slice();
};
var xdom_XDom = function() { };
xdom_XDom.__name__ = true;
xdom_XDom.alert = function(v) {
	window.alert(Std.string(v));
};
xdom_XDom.X = function(value) {
	return value;
};
var xdom_Selector = {};
xdom_Selector._new = function(s) {
	return s;
};
xdom_Selector.prefixed = function(scope,selector,forceId) {
	if(scope.nodeType != 1) {
		return selector;
	}
	var prefix;
	var _g = scope.id;
	if(_g == null) {
		if(forceId || !xdom_XDom.document.documentElement.contains(scope)) {
			prefix = "#" + (scope.id = "_xdom_" + xdom_Selector.ns + "_" + xdom_Selector.counter++);
		} else if(xdom_Selector.hasScope) {
			prefix = ":scope";
		} else {
			var cur = scope;
			var path = [];
			while(true) {
				var _g1 = cur.id;
				if(_g1 == null) {
					path.push(cur.tagName);
				} else if(_g1 == "") {
					path.push(cur.tagName);
				} else {
					path.push("#" + _g1);
					break;
				}
				cur = cur.parentElement;
				if(!(cur != null)) {
					break;
				}
			}
			path.reverse();
			prefix = path.join(">");
		}
	} else if(_g == "") {
		if(forceId || !xdom_XDom.document.documentElement.contains(scope)) {
			prefix = "#" + (scope.id = "_xdom_" + xdom_Selector.ns + "_" + xdom_Selector.counter++);
		} else if(xdom_Selector.hasScope) {
			prefix = ":scope";
		} else {
			var cur = scope;
			var path = [];
			while(true) {
				var _g1 = cur.id;
				if(_g1 == null) {
					path.push(cur.tagName);
				} else if(_g1 == "") {
					path.push(cur.tagName);
				} else {
					path.push("#" + _g1);
					break;
				}
				cur = cur.parentElement;
				if(!(cur != null)) {
					break;
				}
			}
			path.reverse();
			prefix = path.join(">");
		}
	} else {
		prefix = "#" + _g;
	}
	return "" + prefix + " " + selector;
};
var xdom_Wrapped = {};
xdom_Wrapped.get_nodeList = function(this1) {
	if(!this1.nodeList) {
		return [];
	} else {
		return true;
	}
};
xdom_Wrapped.get_children = function(this1) {
	if(!this1.children) {
		return [];
	} else {
		return true;
	}
};
xdom_Wrapped.get_dataset = function(this1) {
	if(!this1.dataset) {
		return { };
	} else {
		return true;
	}
};
xdom_Wrapped.qsa = function(this1,selector) {
	if(this1 != null && this1.querySelectorAll != null) {
		if(this1 == xdom_XDom.document) {
			return xdom_XDom.document.querySelectorAll(selector);
		} else {
			var e = this1;
			return (e.matches(selector) ? [e] : []).concat(xdom_html_Collection.toArray(e.querySelectorAll(xdom_Selector.prefixed(e,selector))));
		}
	} else {
		return xdom_html_Collection.empty();
	}
};
xdom_Wrapped.upcast = function(w) {
	return w;
};
xdom_Wrapped.get_onabort = function(this1) {
	return xdom_html_EventSource.make(this1,"abort");
};
xdom_Wrapped.get_onblur = function(this1) {
	return xdom_html_EventSource.make(this1,"blur");
};
xdom_Wrapped.get_oncanplay = function(this1) {
	return xdom_html_EventSource.make(this1,"canplay");
};
xdom_Wrapped.get_oncanplaythrough = function(this1) {
	return xdom_html_EventSource.make(this1,"canplaythrough");
};
xdom_Wrapped.get_onchange = function(this1) {
	return xdom_html_EventSource.make(this1,"change");
};
xdom_Wrapped.get_onclick = function(this1) {
	return xdom_html_EventSource.make(this1,"click");
};
xdom_Wrapped.get_oncompositionend = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionend");
};
xdom_Wrapped.get_oncompositionstart = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionstart");
};
xdom_Wrapped.get_oncompositionupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionupdate");
};
xdom_Wrapped.get_oncontextmenu = function(this1) {
	return xdom_html_EventSource.make(this1,"contextmenu");
};
xdom_Wrapped.get_oncopy = function(this1) {
	return xdom_html_EventSource.make(this1,"copy");
};
xdom_Wrapped.get_oncut = function(this1) {
	return xdom_html_EventSource.make(this1,"cut");
};
xdom_Wrapped.get_ondblclick = function(this1) {
	return xdom_html_EventSource.make(this1,"dblclick");
};
xdom_Wrapped.get_ondrag = function(this1) {
	return xdom_html_EventSource.make(this1,"drag");
};
xdom_Wrapped.get_ondragend = function(this1) {
	return xdom_html_EventSource.make(this1,"dragend");
};
xdom_Wrapped.get_ondragenter = function(this1) {
	return xdom_html_EventSource.make(this1,"dragenter");
};
xdom_Wrapped.get_ondragleave = function(this1) {
	return xdom_html_EventSource.make(this1,"dragleave");
};
xdom_Wrapped.get_ondragover = function(this1) {
	return xdom_html_EventSource.make(this1,"dragover");
};
xdom_Wrapped.get_ondragstart = function(this1) {
	return xdom_html_EventSource.make(this1,"dragstart");
};
xdom_Wrapped.get_ondrop = function(this1) {
	return xdom_html_EventSource.make(this1,"drop");
};
xdom_Wrapped.get_ondurationchange = function(this1) {
	return xdom_html_EventSource.make(this1,"durationchange");
};
xdom_Wrapped.get_onemptied = function(this1) {
	return xdom_html_EventSource.make(this1,"emptied");
};
xdom_Wrapped.get_onended = function(this1) {
	return xdom_html_EventSource.make(this1,"ended");
};
xdom_Wrapped.get_onerror = function(this1) {
	return xdom_html_EventSource.make(this1,"error");
};
xdom_Wrapped.get_onfocus = function(this1) {
	return xdom_html_EventSource.make(this1,"focus");
};
xdom_Wrapped.get_onfullscreenchange = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenchange");
};
xdom_Wrapped.get_onfullscreenerror = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenerror");
};
xdom_Wrapped.get_ongotpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"gotpointercapture");
};
xdom_Wrapped.get_oninput = function(this1) {
	return xdom_html_EventSource.make(this1,"input");
};
xdom_Wrapped.get_oninvalid = function(this1) {
	return xdom_html_EventSource.make(this1,"invalid");
};
xdom_Wrapped.get_onkeydown = function(this1) {
	return xdom_html_EventSource.make(this1,"keydown");
};
xdom_Wrapped.get_onkeypress = function(this1) {
	return xdom_html_EventSource.make(this1,"keypress");
};
xdom_Wrapped.get_onkeyup = function(this1) {
	return xdom_html_EventSource.make(this1,"keyup");
};
xdom_Wrapped.get_onload = function(this1) {
	return xdom_html_EventSource.make(this1,"load");
};
xdom_Wrapped.get_onloadeddata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadeddata");
};
xdom_Wrapped.get_onloadedmetadata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadedmetadata");
};
xdom_Wrapped.get_onloadstart = function(this1) {
	return xdom_html_EventSource.make(this1,"loadstart");
};
xdom_Wrapped.get_onlostpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"lostpointercapture");
};
xdom_Wrapped.get_onmousedown = function(this1) {
	return xdom_html_EventSource.make(this1,"mousedown");
};
xdom_Wrapped.get_onmouseenter = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseenter");
};
xdom_Wrapped.get_onmouseleave = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseleave");
};
xdom_Wrapped.get_onmousemove = function(this1) {
	return xdom_html_EventSource.make(this1,"mousemove");
};
xdom_Wrapped.get_onmouseout = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseout");
};
xdom_Wrapped.get_onmouseover = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseover");
};
xdom_Wrapped.get_onmouseup = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseup");
};
xdom_Wrapped.get_onpaste = function(this1) {
	return xdom_html_EventSource.make(this1,"paste");
};
xdom_Wrapped.get_onpause = function(this1) {
	return xdom_html_EventSource.make(this1,"pause");
};
xdom_Wrapped.get_onplay = function(this1) {
	return xdom_html_EventSource.make(this1,"play");
};
xdom_Wrapped.get_onplaying = function(this1) {
	return xdom_html_EventSource.make(this1,"playing");
};
xdom_Wrapped.get_onpointercancel = function(this1) {
	return xdom_html_EventSource.make(this1,"pointercancel");
};
xdom_Wrapped.get_onpointerdown = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerdown");
};
xdom_Wrapped.get_onpointerenter = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerenter");
};
xdom_Wrapped.get_onpointerleave = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerleave");
};
xdom_Wrapped.get_onpointerlockchange = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockchange");
};
xdom_Wrapped.get_onpointerlockerror = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockerror");
};
xdom_Wrapped.get_onpointermove = function(this1) {
	return xdom_html_EventSource.make(this1,"pointermove");
};
xdom_Wrapped.get_onpointerout = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerout");
};
xdom_Wrapped.get_onpointerover = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerover");
};
xdom_Wrapped.get_onpointerup = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerup");
};
xdom_Wrapped.get_onprogress = function(this1) {
	return xdom_html_EventSource.make(this1,"progress");
};
xdom_Wrapped.get_onratechange = function(this1) {
	return xdom_html_EventSource.make(this1,"ratechange");
};
xdom_Wrapped.get_onreset = function(this1) {
	return xdom_html_EventSource.make(this1,"reset");
};
xdom_Wrapped.get_onresize = function(this1) {
	return xdom_html_EventSource.make(this1,"resize");
};
xdom_Wrapped.get_onscroll = function(this1) {
	return xdom_html_EventSource.make(this1,"scroll");
};
xdom_Wrapped.get_onseeked = function(this1) {
	return xdom_html_EventSource.make(this1,"seeked");
};
xdom_Wrapped.get_onseeking = function(this1) {
	return xdom_html_EventSource.make(this1,"seeking");
};
xdom_Wrapped.get_onselect = function(this1) {
	return xdom_html_EventSource.make(this1,"select");
};
xdom_Wrapped.get_onshow = function(this1) {
	return xdom_html_EventSource.make(this1,"show");
};
xdom_Wrapped.get_onstalled = function(this1) {
	return xdom_html_EventSource.make(this1,"stalled");
};
xdom_Wrapped.get_onsubmit = function(this1) {
	return xdom_html_EventSource.make(this1,"submit");
};
xdom_Wrapped.get_onsuspend = function(this1) {
	return xdom_html_EventSource.make(this1,"suspend");
};
xdom_Wrapped.get_ontimeupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"timeupdate");
};
xdom_Wrapped.get_ontouchcancel = function(this1) {
	return xdom_html_EventSource.make(this1,"touchcancel");
};
xdom_Wrapped.get_ontouchend = function(this1) {
	return xdom_html_EventSource.make(this1,"touchend");
};
xdom_Wrapped.get_ontouchmove = function(this1) {
	return xdom_html_EventSource.make(this1,"touchmove");
};
xdom_Wrapped.get_ontouchstart = function(this1) {
	return xdom_html_EventSource.make(this1,"touchstart");
};
xdom_Wrapped.get_onvolumechange = function(this1) {
	return xdom_html_EventSource.make(this1,"volumechange");
};
xdom_Wrapped.get_onwaiting = function(this1) {
	return xdom_html_EventSource.make(this1,"waiting");
};
xdom_Wrapped.get_onwheel = function(this1) {
	return xdom_html_EventSource.make(this1,"wheel");
};
var xdom_html_Collection = {};
xdom_html_Collection.get_length = function(this1) {
	return this1.length;
};
xdom_html_Collection.get = function(this1,index) {
	return this1[index];
};
xdom_html_Collection.toArray = function(this1) {
	return Array.prototype.slice.call(this1);
};
xdom_html_Collection.empty = function() {
	return xdom_html_Collection.EMPTY;
};
xdom_html_Collection.qsa = function(this1,selector) {
	var ret = [];
	var _g = 0;
	while(_g < this1.length) {
		var e = this1[_g];
		++_g;
		ret = ret.concat(e.qsa(selector));
	}
	return ret;
};
var xdom_html_Dataset = {};
xdom_html_Dataset.__getProperty = function(this1,name) {
	return this1[name];
};
xdom_html_Dataset.__setProperty = function(this1,name,value) {
	return this1[name] = value;
};
xdom_html_Dataset.keys = function(this1) {
	return Object.getOwnPropertyNames(this1);
};
xdom_html_Dataset.toggle = function(this1,name,force) {
	this1[name] = force == null ? this1[name] != null ? "" : null : !force ? "" : null;
};
var xdom_html_DatasetValue = {};
xdom_html_DatasetValue.toInt = function(this1) {
	return Std.parseInt(this1);
};
xdom_html_DatasetValue.toFloat = function(this1) {
	return parseFloat(this1);
};
xdom_html_DatasetValue.toFlag = function(this1) {
	return this1 != null;
};
xdom_html_DatasetValue.ofFlag = function(flag) {
	if(flag) {
		return "";
	} else {
		return null;
	}
};
xdom_html_DatasetValue.ofNumber = function(f) {
	if(isNaN(f)) {
		return null;
	} else if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
xdom_html_DatasetValue.not = function(v) {
	return v != null;
};
xdom_html_DatasetValue.lOrBool = function(v,b) {
	if(v == null) {
		return b;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.rOrBool = function(b,v) {
	if(!b) {
		return v != null;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.lOr = function(v,w) {
	if(v == null) {
		return w != null;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.lAndBool = function(v,b) {
	if(v != null) {
		return b;
	} else {
		return false;
	}
};
xdom_html_DatasetValue.rAndBool = function(b,v) {
	if(b) {
		return v != null;
	} else {
		return false;
	}
};
xdom_html_DatasetValue.lAnd = function(v,w) {
	if(v != null) {
		return w != null;
	} else {
		return false;
	}
};
var xdom_html_Document = {};
xdom_html_Document.get_body = function(this1) {
	return this1.body;
};
xdom_html_Document.getElementById = function(this1,id) {
	return this1.getElementById(id);
};
xdom_html_Document.toNode = function(this1) {
	return xdom_Wrapped.upcast(this1);
};
xdom_html_Document.get_onabort = function(this1) {
	return xdom_html_EventSource.make(this1,"abort");
};
xdom_html_Document.get_onblur = function(this1) {
	return xdom_html_EventSource.make(this1,"blur");
};
xdom_html_Document.get_oncanplay = function(this1) {
	return xdom_html_EventSource.make(this1,"canplay");
};
xdom_html_Document.get_oncanplaythrough = function(this1) {
	return xdom_html_EventSource.make(this1,"canplaythrough");
};
xdom_html_Document.get_onchange = function(this1) {
	return xdom_html_EventSource.make(this1,"change");
};
xdom_html_Document.get_onclick = function(this1) {
	return xdom_html_EventSource.make(this1,"click");
};
xdom_html_Document.get_oncompositionend = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionend");
};
xdom_html_Document.get_oncompositionstart = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionstart");
};
xdom_html_Document.get_oncompositionupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionupdate");
};
xdom_html_Document.get_oncontextmenu = function(this1) {
	return xdom_html_EventSource.make(this1,"contextmenu");
};
xdom_html_Document.get_oncopy = function(this1) {
	return xdom_html_EventSource.make(this1,"copy");
};
xdom_html_Document.get_oncut = function(this1) {
	return xdom_html_EventSource.make(this1,"cut");
};
xdom_html_Document.get_ondblclick = function(this1) {
	return xdom_html_EventSource.make(this1,"dblclick");
};
xdom_html_Document.get_ondrag = function(this1) {
	return xdom_html_EventSource.make(this1,"drag");
};
xdom_html_Document.get_ondragend = function(this1) {
	return xdom_html_EventSource.make(this1,"dragend");
};
xdom_html_Document.get_ondragenter = function(this1) {
	return xdom_html_EventSource.make(this1,"dragenter");
};
xdom_html_Document.get_ondragleave = function(this1) {
	return xdom_html_EventSource.make(this1,"dragleave");
};
xdom_html_Document.get_ondragover = function(this1) {
	return xdom_html_EventSource.make(this1,"dragover");
};
xdom_html_Document.get_ondragstart = function(this1) {
	return xdom_html_EventSource.make(this1,"dragstart");
};
xdom_html_Document.get_ondrop = function(this1) {
	return xdom_html_EventSource.make(this1,"drop");
};
xdom_html_Document.get_ondurationchange = function(this1) {
	return xdom_html_EventSource.make(this1,"durationchange");
};
xdom_html_Document.get_onemptied = function(this1) {
	return xdom_html_EventSource.make(this1,"emptied");
};
xdom_html_Document.get_onended = function(this1) {
	return xdom_html_EventSource.make(this1,"ended");
};
xdom_html_Document.get_onerror = function(this1) {
	return xdom_html_EventSource.make(this1,"error");
};
xdom_html_Document.get_onfocus = function(this1) {
	return xdom_html_EventSource.make(this1,"focus");
};
xdom_html_Document.get_onfullscreenchange = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenchange");
};
xdom_html_Document.get_onfullscreenerror = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenerror");
};
xdom_html_Document.get_ongotpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"gotpointercapture");
};
xdom_html_Document.get_oninput = function(this1) {
	return xdom_html_EventSource.make(this1,"input");
};
xdom_html_Document.get_oninvalid = function(this1) {
	return xdom_html_EventSource.make(this1,"invalid");
};
xdom_html_Document.get_onkeydown = function(this1) {
	return xdom_html_EventSource.make(this1,"keydown");
};
xdom_html_Document.get_onkeypress = function(this1) {
	return xdom_html_EventSource.make(this1,"keypress");
};
xdom_html_Document.get_onkeyup = function(this1) {
	return xdom_html_EventSource.make(this1,"keyup");
};
xdom_html_Document.get_onload = function(this1) {
	return xdom_html_EventSource.make(this1,"load");
};
xdom_html_Document.get_onloadeddata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadeddata");
};
xdom_html_Document.get_onloadedmetadata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadedmetadata");
};
xdom_html_Document.get_onloadstart = function(this1) {
	return xdom_html_EventSource.make(this1,"loadstart");
};
xdom_html_Document.get_onlostpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"lostpointercapture");
};
xdom_html_Document.get_onmousedown = function(this1) {
	return xdom_html_EventSource.make(this1,"mousedown");
};
xdom_html_Document.get_onmouseenter = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseenter");
};
xdom_html_Document.get_onmouseleave = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseleave");
};
xdom_html_Document.get_onmousemove = function(this1) {
	return xdom_html_EventSource.make(this1,"mousemove");
};
xdom_html_Document.get_onmouseout = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseout");
};
xdom_html_Document.get_onmouseover = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseover");
};
xdom_html_Document.get_onmouseup = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseup");
};
xdom_html_Document.get_onpaste = function(this1) {
	return xdom_html_EventSource.make(this1,"paste");
};
xdom_html_Document.get_onpause = function(this1) {
	return xdom_html_EventSource.make(this1,"pause");
};
xdom_html_Document.get_onplay = function(this1) {
	return xdom_html_EventSource.make(this1,"play");
};
xdom_html_Document.get_onplaying = function(this1) {
	return xdom_html_EventSource.make(this1,"playing");
};
xdom_html_Document.get_onpointercancel = function(this1) {
	return xdom_html_EventSource.make(this1,"pointercancel");
};
xdom_html_Document.get_onpointerdown = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerdown");
};
xdom_html_Document.get_onpointerenter = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerenter");
};
xdom_html_Document.get_onpointerleave = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerleave");
};
xdom_html_Document.get_onpointerlockchange = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockchange");
};
xdom_html_Document.get_onpointerlockerror = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockerror");
};
xdom_html_Document.get_onpointermove = function(this1) {
	return xdom_html_EventSource.make(this1,"pointermove");
};
xdom_html_Document.get_onpointerout = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerout");
};
xdom_html_Document.get_onpointerover = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerover");
};
xdom_html_Document.get_onpointerup = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerup");
};
xdom_html_Document.get_onprogress = function(this1) {
	return xdom_html_EventSource.make(this1,"progress");
};
xdom_html_Document.get_onratechange = function(this1) {
	return xdom_html_EventSource.make(this1,"ratechange");
};
xdom_html_Document.get_onreset = function(this1) {
	return xdom_html_EventSource.make(this1,"reset");
};
xdom_html_Document.get_onresize = function(this1) {
	return xdom_html_EventSource.make(this1,"resize");
};
xdom_html_Document.get_onscroll = function(this1) {
	return xdom_html_EventSource.make(this1,"scroll");
};
xdom_html_Document.get_onseeked = function(this1) {
	return xdom_html_EventSource.make(this1,"seeked");
};
xdom_html_Document.get_onseeking = function(this1) {
	return xdom_html_EventSource.make(this1,"seeking");
};
xdom_html_Document.get_onselect = function(this1) {
	return xdom_html_EventSource.make(this1,"select");
};
xdom_html_Document.get_onshow = function(this1) {
	return xdom_html_EventSource.make(this1,"show");
};
xdom_html_Document.get_onstalled = function(this1) {
	return xdom_html_EventSource.make(this1,"stalled");
};
xdom_html_Document.get_onsubmit = function(this1) {
	return xdom_html_EventSource.make(this1,"submit");
};
xdom_html_Document.get_onsuspend = function(this1) {
	return xdom_html_EventSource.make(this1,"suspend");
};
xdom_html_Document.get_ontimeupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"timeupdate");
};
xdom_html_Document.get_ontouchcancel = function(this1) {
	return xdom_html_EventSource.make(this1,"touchcancel");
};
xdom_html_Document.get_ontouchend = function(this1) {
	return xdom_html_EventSource.make(this1,"touchend");
};
xdom_html_Document.get_ontouchmove = function(this1) {
	return xdom_html_EventSource.make(this1,"touchmove");
};
xdom_html_Document.get_ontouchstart = function(this1) {
	return xdom_html_EventSource.make(this1,"touchstart");
};
xdom_html_Document.get_onvolumechange = function(this1) {
	return xdom_html_EventSource.make(this1,"volumechange");
};
xdom_html_Document.get_onwaiting = function(this1) {
	return xdom_html_EventSource.make(this1,"waiting");
};
xdom_html_Document.get_onwheel = function(this1) {
	return xdom_html_EventSource.make(this1,"wheel");
};
var xdom_html_EventSource = {};
xdom_html_EventSource._new = function(f) {
	return f;
};
xdom_html_EventSource.once = function(this1,c) {
	var c1 = c;
	var link = null;
	link = this1(function(v) {
		tink_core_Callback.invoke(c1,v);
		if(link != null) {
			link.cancel();
		}
		c1 = null;
		link = null;
	});
	return link;
};
xdom_html_EventSource.get_signal = function(this1) {
	var self = this1;
	if(self.__xdomSignal == null) {
		self.__xdomSignal = new tink_core__$Signal_Suspendable(function(cb) {
			var this2 = this1(cb);
			if(this2 == null) {
				return tink_core_CallbackLink.noop;
			} else {
				return $bind(this2,this2.cancel);
			}
		});
	}
	return self.__xdomSignal;
};
xdom_html_EventSource.map = function(this1,f) {
	return tink_core_Signal.map(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.filter = function(this1,f) {
	return tink_core_Signal.filter(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.select = function(this1,f) {
	return tink_core_Signal.select(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.join = function(this1,other) {
	return tink_core_Signal.join(xdom_html_EventSource.get_signal(this1),other);
};
xdom_html_EventSource.nextTime = function(this1,condition) {
	return tink_core_Signal.nextTime(xdom_html_EventSource.get_signal(this1),condition);
};
xdom_html_EventSource.delegate = function(this1,s,cb) {
	var prefixed = null;
	return this1(function(e) {
		var root = e.currentTarget;
		var cur = e.target;
		if(prefixed == null) {
			prefixed = xdom_Selector.prefixed(root,s,true);
		}
		while(cur != null) {
			if(cur.matches(prefixed)) {
				var event = { currentTarget : cur};
				Object.setPrototypeOf(event,e);
				tink_core_Callback.invoke(cb,event);
			}
			if(cur == root) {
				break;
			}
			cur = cur.parentElement;
		}
	});
};
xdom_html_EventSource.make = function(target,event) {
	if(target != null && target.addEventListener != null) {
		var target1 = target;
		var this1 = function(cb) {
			var handle = function(event) {
				tink_core_Callback.invoke(cb,event);
			};
			target1.addEventListener(event,handle);
			var _g = $bind(target1,target1.removeEventListener);
			var type = event;
			var listener = handle;
			var this1 = new tink_core_SimpleLink(function() {
				_g(type,listener);
			});
			return this1;
		};
		return this1;
	} else {
		xdom_XDom.console.warn("attempted to register `" + event + "` event on",target);
		var this1 = function(cb) {
			return null;
		};
		return this1;
	}
};
var xdom_html_EventSignal = {};
xdom_html_EventSignal.once = function(this1,c) {
	var c1 = c;
	var link = null;
	var _e = this1;
	link = (function(handler) {
		return _e.listen(handler);
	})(function(v) {
		tink_core_Callback.invoke(c1,v);
		if(link != null) {
			link.cancel();
		}
		c1 = null;
		link = null;
	});
	return link;
};
xdom_html_EventSignal.of = function(s) {
	return s;
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}

        if (typeof Element !== "undefined" && !Element.prototype.matches)
          Element.prototype.matches = Element.prototype.msMatchesSelector;
      ;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
tink_Url.SCHEME = 2;
tink_Url.PAYLOAD = 3;
tink_Url.AUTH = 6;
tink_Url.HOSTNAMES = 7;
tink_Url.PATH = 8;
tink_Url.QUERY = 10;
tink_Url.HASH = 12;
tink_url_Path.root = "/";
tink_state_Observable.stack = new haxe_ds_List();
tink_state_Observable.scheduled = [];
tink_state_Observable.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
tink_state_Observable.isScheduled = false;
tink_state_Observable.counter = 0;
tink_pure__$List_Node.EMPTY = [];
spectatory_Location.href = (function($this) {
	var $r;
	var this1 = new tink_state__$State_SimpleState(window.location.href,null,null);
	var s = this1;
	
			(function () {
				if ( typeof window.CustomEvent === "function" ) return;
				function CustomEvent ( event, params ) {
					params = params || { bubbles: false, cancelable: false, detail: undefined };
					var evt = document.createEvent( "CustomEvent" );
					evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
					return evt;
				}
				CustomEvent.prototype = window.Event.prototype;
				window.CustomEvent = CustomEvent;
			})();
		;
	var update = function(href) {
		if(href != tink_state_State.get_value(s)) {
			s.set(href);
		}
	};
	var oldPushState = ($_=window.history,$bind($_,$_.pushState));
	window.history.pushState = function(data,title,url) {
		oldPushState(data,title,url);
		update(window.location.href);
	};
	var oldReplaceState = ($_=window.history,$bind($_,$_.replaceState));
	window.history.replaceState = function(data,title,url) {
		oldReplaceState(data,title,url);
		update(window.location.href);
	};
	window.addEventListener("popstate",function(_) {
		update(window.location.href);
	});
	window.addEventListener("hashchange",function(e) {
		update(e.newURL);
	});
	$r = s;
	return $r;
}(this));
spectatory_Location.url = tink_state_Observable.map(spectatory_Location.href,tink_state_Transform.plain(function(href) {
	return tink_Url.parse(href);
}));
spectatory_Location.query = tink_state_Observable.map(spectatory_Location.url,tink_state_Transform.plain(function(url) {
	var this1 = null;
	var map = this1;
	var param = new tink_url__$Query_QueryStringParser(url.query,"&","=",0);
	while(param.hasNext()) {
		var param1 = param.next();
		map = tink_pure_Mapping.with(map,param1.name,param1.value);
	}
	return map;
}));
tink_state_ConstObservable.NEVER = (function($this) {
	var $r;
	var this1 = new tink_core__$Future_SuspendableFuture(function(_) {
		return null;
	});
	$r = this1;
	return $r;
}(this));
Main.router = new coconut_router_BrowserRouter({ routeToLocation : function(route) {
	switch(route._hx_index) {
	case 0:
		return tink_Url.fromString("/");
	case 1:
		return tink_Url.fromString("/one");
	case 2:
		return tink_Url.fromString("/two");
	case 3:
		return tink_Url.fromString(route.path);
	}
}, locationToRoute : function(url) {
	var _g = tink_url_PortionArray.toStringArray(tink_url_Path.parts(url.path));
	switch(_g.length) {
	case 0:
		return Route.HomePage;
	case 1:
		var _g1 = _g[0];
		if(_g1 == null) {
			return Route.UnknownPage(url.path);
		} else {
			switch(_g1) {
			case "one":
				return Route.OnePage;
			case "two":
				return Route.TwoPage;
			default:
				return Route.UnknownPage(url.path);
			}
		}
		break;
	default:
		return Route.UnknownPage(url.path);
	}
}});
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
coconut_diffing_Widget.defer = tink_state_Observable.schedule;
coconut_vdom_View.idCounter = 0;
App.__type = { create : function(__coco_data_) {
	return new App(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
tink_state_ObservableIterator.TRIGGER = haxe_ds_Option.Some(tink_core_Noise.Noise);
Pages.__type = { create : function(__coco_data_) {
	return new Pages(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
View0.__type = { create : function(__coco_data_) {
	return new View0(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
View1.__type = { create : function(__coco_data_) {
	return new View1(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
View2.__type = { create : function(__coco_data_) {
	return new View2(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
View3.__type = { create : function(__coco_data_) {
	return new View3(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
Unknown.__type = { create : function(__coco_data_) {
	return new Unknown(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
animation_Hideable.animEndEvent = (function($this) {
	var $r;
	var el = window.document.createElement("fakeelement");
	var animations = [["animation","animationend"],["OAnimation","oAnimationEnd"],["MozAnimation","Animationend"],["WebkitAnimation","webkitAnimationEnd"]];
	var event = "animationend";
	{
		var _g = 0;
		while(_g < animations.length) {
			var t = animations[_g];
			++_g;
			if(((el.style[t[0]]) !== undefined)) {
				event = t[1];
				break;
			}
		}
	}
	$r = event;
	return $r;
}(this));
animation_Hideable.__type = { create : function(__coco_data_) {
	return new animation_Hideable(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
coconut_diffing_Differ.WIDGET_INST = { };
coconut_diffing_Differ.EMPTY = { };
coconut_vdom__$Html_Svg.SVG = "http://www.w3.org/2000/svg";
coconut_vdom_Html.nodeTypes = new haxe_ds_StringMap();
coconut_vdom_Html.WBR = coconut_vdom_Html.nodeType("wbr");
coconut_vdom_Html.VIDEO = coconut_vdom_Html.nodeType("video");
coconut_vdom_Html.UL = coconut_vdom_Html.nodeType("ul");
coconut_vdom_Html.TRACK = coconut_vdom_Html.nodeType("track");
coconut_vdom_Html.TR = coconut_vdom_Html.nodeType("tr");
coconut_vdom_Html.TITLE = coconut_vdom_Html.nodeType("title");
coconut_vdom_Html.THEAD = coconut_vdom_Html.nodeType("thead");
coconut_vdom_Html.TH = coconut_vdom_Html.nodeType("th");
coconut_vdom_Html.TFOOT = coconut_vdom_Html.nodeType("tfoot");
coconut_vdom_Html.TEXTAREA = coconut_vdom_Html.nodeType("textarea");
coconut_vdom_Html.TD = coconut_vdom_Html.nodeType("td");
coconut_vdom_Html.TBODY = coconut_vdom_Html.nodeType("tbody");
coconut_vdom_Html.TABLE = coconut_vdom_Html.nodeType("table");
coconut_vdom_Html.SVG = coconut_vdom_Html.nodeType("svg:svg");
coconut_vdom_Html.SUMMARY = coconut_vdom_Html.nodeType("summary");
coconut_vdom_Html.STYLE = coconut_vdom_Html.nodeType("style");
coconut_vdom_Html.STRONG = coconut_vdom_Html.nodeType("strong");
coconut_vdom_Html.SPAN = coconut_vdom_Html.nodeType("span");
coconut_vdom_Html.SOURCE = coconut_vdom_Html.nodeType("source");
coconut_vdom_Html.SMALL = coconut_vdom_Html.nodeType("small");
coconut_vdom_Html.SELECT = coconut_vdom_Html.nodeType("select");
coconut_vdom_Html.SECTION = coconut_vdom_Html.nodeType("section");
coconut_vdom_Html.SCRIPT = coconut_vdom_Html.nodeType("script");
coconut_vdom_Html.RECT = coconut_vdom_Html.nodeType("svg:rect");
coconut_vdom_Html.PRE = coconut_vdom_Html.nodeType("pre");
coconut_vdom_Html.POLYGON = coconut_vdom_Html.nodeType("svg:polygon");
coconut_vdom_Html.PICTURE = coconut_vdom_Html.nodeType("picture");
coconut_vdom_Html.PATH = coconut_vdom_Html.nodeType("svg:path");
coconut_vdom_Html.PARAM = coconut_vdom_Html.nodeType("param");
coconut_vdom_Html.P = coconut_vdom_Html.nodeType("p");
coconut_vdom_Html.OPTION = coconut_vdom_Html.nodeType("option");
coconut_vdom_Html.OL = coconut_vdom_Html.nodeType("ol");
coconut_vdom_Html.OBJECT = coconut_vdom_Html.nodeType("object");
coconut_vdom_Html.NAV = coconut_vdom_Html.nodeType("nav");
coconut_vdom_Html.META = coconut_vdom_Html.nodeType("meta");
coconut_vdom_Html.MENU = coconut_vdom_Html.nodeType("menu");
coconut_vdom_Html.MAIN = coconut_vdom_Html.nodeType("main");
coconut_vdom_Html.LINK = coconut_vdom_Html.nodeType("link");
coconut_vdom_Html.LI = coconut_vdom_Html.nodeType("li");
coconut_vdom_Html.LABEL = coconut_vdom_Html.nodeType("label");
coconut_vdom_Html.INS = coconut_vdom_Html.nodeType("ins");
coconut_vdom_Html.INPUT = coconut_vdom_Html.nodeType("input");
coconut_vdom_Html.IMG = coconut_vdom_Html.nodeType("img");
coconut_vdom_Html.IFRAME = coconut_vdom_Html.nodeType("iframe");
coconut_vdom_Html.I = coconut_vdom_Html.nodeType("i");
coconut_vdom_Html.HTML = coconut_vdom_Html.nodeType("html");
coconut_vdom_Html.HR = coconut_vdom_Html.nodeType("hr");
coconut_vdom_Html.HEADER = coconut_vdom_Html.nodeType("header");
coconut_vdom_Html.HEAD = coconut_vdom_Html.nodeType("head");
coconut_vdom_Html.H6 = coconut_vdom_Html.nodeType("h6");
coconut_vdom_Html.H5 = coconut_vdom_Html.nodeType("h5");
coconut_vdom_Html.H4 = coconut_vdom_Html.nodeType("h4");
coconut_vdom_Html.H3 = coconut_vdom_Html.nodeType("h3");
coconut_vdom_Html.H2 = coconut_vdom_Html.nodeType("h2");
coconut_vdom_Html.H1 = coconut_vdom_Html.nodeType("h1");
coconut_vdom_Html.FORM = coconut_vdom_Html.nodeType("form");
coconut_vdom_Html.FOOTER = coconut_vdom_Html.nodeType("footer");
coconut_vdom_Html.FIELDSET = coconut_vdom_Html.nodeType("fieldset");
coconut_vdom_Html.EMBED = coconut_vdom_Html.nodeType("embed");
coconut_vdom_Html.EM = coconut_vdom_Html.nodeType("em");
coconut_vdom_Html.ELLIPSE = coconut_vdom_Html.nodeType("svg:ellipse");
coconut_vdom_Html.DT = coconut_vdom_Html.nodeType("dt");
coconut_vdom_Html.DL = coconut_vdom_Html.nodeType("dl");
coconut_vdom_Html.DIV = coconut_vdom_Html.nodeType("div");
coconut_vdom_Html.DETAILS = coconut_vdom_Html.nodeType("details");
coconut_vdom_Html.DEL = coconut_vdom_Html.nodeType("del");
coconut_vdom_Html.DD = coconut_vdom_Html.nodeType("dd");
coconut_vdom_Html.CIRCLE = coconut_vdom_Html.nodeType("svg:circle");
coconut_vdom_Html.CANVAS = coconut_vdom_Html.nodeType("canvas");
coconut_vdom_Html.BUTTON = coconut_vdom_Html.nodeType("button");
coconut_vdom_Html.BR = coconut_vdom_Html.nodeType("br");
coconut_vdom_Html.BODY = coconut_vdom_Html.nodeType("body");
coconut_vdom_Html.BLOCKQUOTE = coconut_vdom_Html.nodeType("blockquote");
coconut_vdom_Html.B = coconut_vdom_Html.nodeType("b");
coconut_vdom_Html.AUDIO = coconut_vdom_Html.nodeType("audio");
coconut_vdom_Html.ASIDE = coconut_vdom_Html.nodeType("aside");
coconut_vdom_Html.ARTICLE = coconut_vdom_Html.nodeType("article");
coconut_vdom_Html.A = coconut_vdom_Html.nodeType("a");
coconut_vdom__$Html_HtmlFragment.tags = new haxe_ds_StringMap();
coconut_vdom__$Html_Text.inst = new coconut_vdom__$Html_Text();
coconut_vdom__$Renderer_DomBackend.PLACEHOLDER = coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"",null);
coconut_vdom_Renderer.DIFFER = new coconut_diffing_Differ(new coconut_vdom__$Renderer_DomBackend());
fomantic_Accordion.__type = { create : function(__coco_data_) {
	return new fomantic_Accordion(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_AccordionItem.__type = { create : function(__coco_data_) {
	return new fomantic_AccordionItem(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Button.__type = { create : function(__coco_data_) {
	return new fomantic_Button(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Calendar.__type = { create : function(__coco_data_) {
	return new fomantic_Calendar(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Form.__type = { create : function(__coco_data_) {
	return new fomantic_Form(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Icon.__type = { create : function(__coco_data_) {
	return new fomantic_Icon(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_IconicInput.__type = { create : function(__coco_data_) {
	return new fomantic_IconicInput(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Input.__type = { create : function(__coco_data_) {
	return new fomantic_Input(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Inscript.__type = { create : function(__coco_data_) {
	return new fomantic_Inscript(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Login.__type = { create : function(__coco_data_) {
	return new fomantic_Login(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
fomantic_Search.__type = { create : function(__coco_data_) {
	return new fomantic_Search(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
tink_Stringly.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_domspec_CSSParser.style = window.document.createElement("div").style;
tink_pure_FilterResult.ExcludeAndStop = -3;
tink_pure_FilterResult.Exclude = 0;
tink_pure_FilterResult.Include = 1;
tink_pure_FilterResult.IncludeAndStop = 3;
xdom_XDom.window = window;
xdom_XDom.document = window.document;
xdom_XDom.console = $global.console;
xdom_Selector.hasScope = (function($this) {
	var $r;
	try {
		$r = true;
	} catch( _g ) {
		$r = false;
	}
	return $r;
}(this));
xdom_Selector.ns = xdom_XDom.window._xdom_ns = (xdom_XDom.window._xdom_ns | 0) + 1;
xdom_Selector.counter = 0;
xdom_html_Collection.EMPTY = [];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=coco.js.map